/* Generated by Spago v0.93.41 */
(() => {
  // output/Control.Semigroupoid/index.js
  var semigroupoidFn = {
    compose: function(f) {
      return function(g) {
        return function(x) {
          return f(g(x));
        };
      };
    }
  };

  // output/Control.Category/index.js
  var identity = function(dict) {
    return dict.identity;
  };
  var categoryFn = {
    identity: function(x) {
      return x;
    },
    Semigroupoid0: function() {
      return semigroupoidFn;
    }
  };

  // output/Data.Boolean/index.js
  var otherwise = true;

  // output/Data.Function/index.js
  var flip = function(f) {
    return function(b) {
      return function(a) {
        return f(a)(b);
      };
    };
  };
  var $$const = function(a) {
    return function(v) {
      return a;
    };
  };

  // output/Data.Functor/foreign.js
  var arrayMap = function(f) {
    return function(arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  // output/Data.Unit/foreign.js
  var unit = void 0;

  // output/Type.Proxy/index.js
  var $$Proxy = /* @__PURE__ */ function() {
    function $$Proxy2() {
    }
    ;
    $$Proxy2.value = new $$Proxy2();
    return $$Proxy2;
  }();

  // output/Data.Functor/index.js
  var map = function(dict) {
    return dict.map;
  };
  var $$void = function(dictFunctor) {
    return map(dictFunctor)($$const(unit));
  };
  var functorArray = {
    map: arrayMap
  };

  // output/Control.Apply/index.js
  var identity2 = /* @__PURE__ */ identity(categoryFn);
  var apply = function(dict) {
    return dict.apply;
  };
  var applySecond = function(dictApply) {
    var apply1 = apply(dictApply);
    var map7 = map(dictApply.Functor0());
    return function(a) {
      return function(b) {
        return apply1(map7($$const(identity2))(a))(b);
      };
    };
  };

  // output/Control.Applicative/index.js
  var pure = function(dict) {
    return dict.pure;
  };
  var liftA1 = function(dictApplicative) {
    var apply2 = apply(dictApplicative.Apply0());
    var pure1 = pure(dictApplicative);
    return function(f) {
      return function(a) {
        return apply2(pure1(f))(a);
      };
    };
  };

  // output/Control.Bind/index.js
  var bind = function(dict) {
    return dict.bind;
  };

  // output/Control.Monad/index.js
  var ap = function(dictMonad) {
    var bind6 = bind(dictMonad.Bind1());
    var pure5 = pure(dictMonad.Applicative0());
    return function(f) {
      return function(a) {
        return bind6(f)(function(f$prime) {
          return bind6(a)(function(a$prime) {
            return pure5(f$prime(a$prime));
          });
        });
      };
    };
  };

  // output/Data.Semigroup/foreign.js
  var concatArray = function(xs) {
    return function(ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };

  // output/Data.Symbol/index.js
  var reflectSymbol = function(dict) {
    return dict.reflectSymbol;
  };

  // output/Record.Unsafe/foreign.js
  var unsafeGet = function(label4) {
    return function(rec) {
      return rec[label4];
    };
  };

  // output/Data.Semigroup/index.js
  var semigroupArray = {
    append: concatArray
  };
  var append = function(dict) {
    return dict.append;
  };

  // output/Data.Bounded/foreign.js
  var topInt = 2147483647;
  var bottomInt = -2147483648;
  var topChar = String.fromCharCode(65535);
  var bottomChar = String.fromCharCode(0);
  var topNumber = Number.POSITIVE_INFINITY;
  var bottomNumber = Number.NEGATIVE_INFINITY;

  // output/Data.Ord/foreign.js
  var unsafeCompareImpl = function(lt) {
    return function(eq6) {
      return function(gt) {
        return function(x) {
          return function(y) {
            return x < y ? lt : x === y ? eq6 : gt;
          };
        };
      };
    };
  };
  var ordIntImpl = unsafeCompareImpl;
  var ordStringImpl = unsafeCompareImpl;
  var ordCharImpl = unsafeCompareImpl;

  // output/Data.Eq/foreign.js
  var refEq = function(r1) {
    return function(r2) {
      return r1 === r2;
    };
  };
  var eqBooleanImpl = refEq;
  var eqIntImpl = refEq;
  var eqCharImpl = refEq;
  var eqStringImpl = refEq;
  var eqArrayImpl = function(f) {
    return function(xs) {
      return function(ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };

  // output/Data.Eq/index.js
  var eqString = {
    eq: eqStringImpl
  };
  var eqRowNil = {
    eqRecord: function(v) {
      return function(v1) {
        return function(v2) {
          return true;
        };
      };
    }
  };
  var eqRecord = function(dict) {
    return dict.eqRecord;
  };
  var eqRec = function() {
    return function(dictEqRecord) {
      return {
        eq: eqRecord(dictEqRecord)($$Proxy.value)
      };
    };
  };
  var eqInt = {
    eq: eqIntImpl
  };
  var eqChar = {
    eq: eqCharImpl
  };
  var eqBoolean = {
    eq: eqBooleanImpl
  };
  var eq = function(dict) {
    return dict.eq;
  };
  var eq2 = /* @__PURE__ */ eq(eqBoolean);
  var eqArray = function(dictEq) {
    return {
      eq: eqArrayImpl(eq(dictEq))
    };
  };
  var eqRowCons = function(dictEqRecord) {
    var eqRecord1 = eqRecord(dictEqRecord);
    return function() {
      return function(dictIsSymbol) {
        var reflectSymbol2 = reflectSymbol(dictIsSymbol);
        return function(dictEq) {
          var eq32 = eq(dictEq);
          return {
            eqRecord: function(v) {
              return function(ra) {
                return function(rb) {
                  var tail = eqRecord1($$Proxy.value)(ra)(rb);
                  var key2 = reflectSymbol2($$Proxy.value);
                  var get = unsafeGet(key2);
                  return eq32(get(ra))(get(rb)) && tail;
                };
              };
            }
          };
        };
      };
    };
  };
  var notEq = function(dictEq) {
    var eq32 = eq(dictEq);
    return function(x) {
      return function(y) {
        return eq2(eq32(x)(y))(false);
      };
    };
  };

  // output/Data.Ordering/index.js
  var LT = /* @__PURE__ */ function() {
    function LT2() {
    }
    ;
    LT2.value = new LT2();
    return LT2;
  }();
  var GT = /* @__PURE__ */ function() {
    function GT2() {
    }
    ;
    GT2.value = new GT2();
    return GT2;
  }();
  var EQ = /* @__PURE__ */ function() {
    function EQ2() {
    }
    ;
    EQ2.value = new EQ2();
    return EQ2;
  }();

  // output/Data.Ring/foreign.js
  var intSub = function(x) {
    return function(y) {
      return x - y | 0;
    };
  };

  // output/Data.Semiring/foreign.js
  var intAdd = function(x) {
    return function(y) {
      return x + y | 0;
    };
  };
  var intMul = function(x) {
    return function(y) {
      return x * y | 0;
    };
  };

  // output/Data.Semiring/index.js
  var semiringInt = {
    add: intAdd,
    zero: 0,
    mul: intMul,
    one: 1
  };

  // output/Data.Ring/index.js
  var ringInt = {
    sub: intSub,
    Semiring0: function() {
      return semiringInt;
    }
  };

  // output/Data.Ord/index.js
  var ordString = /* @__PURE__ */ function() {
    return {
      compare: ordStringImpl(LT.value)(EQ.value)(GT.value),
      Eq0: function() {
        return eqString;
      }
    };
  }();
  var ordInt = /* @__PURE__ */ function() {
    return {
      compare: ordIntImpl(LT.value)(EQ.value)(GT.value),
      Eq0: function() {
        return eqInt;
      }
    };
  }();
  var ordChar = /* @__PURE__ */ function() {
    return {
      compare: ordCharImpl(LT.value)(EQ.value)(GT.value),
      Eq0: function() {
        return eqChar;
      }
    };
  }();
  var compare = function(dict) {
    return dict.compare;
  };

  // output/Data.Bounded/index.js
  var top = function(dict) {
    return dict.top;
  };
  var boundedInt = {
    top: topInt,
    bottom: bottomInt,
    Ord0: function() {
      return ordInt;
    }
  };
  var boundedChar = {
    top: topChar,
    bottom: bottomChar,
    Ord0: function() {
      return ordChar;
    }
  };
  var bottom = function(dict) {
    return dict.bottom;
  };

  // output/Data.Show/foreign.js
  var showIntImpl = function(n) {
    return n.toString();
  };
  var showStringImpl = function(s) {
    var l = s.length;
    return '"' + s.replace(
      /[\0-\x1F\x7F"\\]/g,
      // eslint-disable-line no-control-regex
      function(c, i) {
        switch (c) {
          case '"':
          case "\\":
            return "\\" + c;
          case "\x07":
            return "\\a";
          case "\b":
            return "\\b";
          case "\f":
            return "\\f";
          case "\n":
            return "\\n";
          case "\r":
            return "\\r";
          case "	":
            return "\\t";
          case "\v":
            return "\\v";
        }
        var k = i + 1;
        var empty4 = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty4;
      }
    ) + '"';
  };

  // output/Data.Show/index.js
  var showString = {
    show: showStringImpl
  };
  var showRecordFields = function(dict) {
    return dict.showRecordFields;
  };
  var showRecord = function() {
    return function() {
      return function(dictShowRecordFields) {
        var showRecordFields1 = showRecordFields(dictShowRecordFields);
        return {
          show: function(record) {
            return "{" + (showRecordFields1($$Proxy.value)(record) + "}");
          }
        };
      };
    };
  };
  var showInt = {
    show: showIntImpl
  };
  var show = function(dict) {
    return dict.show;
  };
  var showRecordFieldsCons = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return function(dictShowRecordFields) {
      var showRecordFields1 = showRecordFields(dictShowRecordFields);
      return function(dictShow) {
        var show12 = show(dictShow);
        return {
          showRecordFields: function(v) {
            return function(record) {
              var tail = showRecordFields1($$Proxy.value)(record);
              var key2 = reflectSymbol2($$Proxy.value);
              var focus2 = unsafeGet(key2)(record);
              return " " + (key2 + (": " + (show12(focus2) + ("," + tail))));
            };
          }
        };
      };
    };
  };
  var showRecordFieldsConsNil = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return function(dictShow) {
      var show12 = show(dictShow);
      return {
        showRecordFields: function(v) {
          return function(record) {
            var key2 = reflectSymbol2($$Proxy.value);
            var focus2 = unsafeGet(key2)(record);
            return " " + (key2 + (": " + (show12(focus2) + " ")));
          };
        }
      };
    };
  };

  // output/Data.Generic.Rep/index.js
  var Inl = /* @__PURE__ */ function() {
    function Inl2(value0) {
      this.value0 = value0;
    }
    ;
    Inl2.create = function(value0) {
      return new Inl2(value0);
    };
    return Inl2;
  }();
  var Inr = /* @__PURE__ */ function() {
    function Inr2(value0) {
      this.value0 = value0;
    }
    ;
    Inr2.create = function(value0) {
      return new Inr2(value0);
    };
    return Inr2;
  }();
  var NoArguments = /* @__PURE__ */ function() {
    function NoArguments2() {
    }
    ;
    NoArguments2.value = new NoArguments2();
    return NoArguments2;
  }();
  var from = function(dict) {
    return dict.from;
  };

  // output/Data.Maybe/index.js
  var identity3 = /* @__PURE__ */ identity(categoryFn);
  var Nothing = /* @__PURE__ */ function() {
    function Nothing2() {
    }
    ;
    Nothing2.value = new Nothing2();
    return Nothing2;
  }();
  var Just = /* @__PURE__ */ function() {
    function Just2(value0) {
      this.value0 = value0;
    }
    ;
    Just2.create = function(value0) {
      return new Just2(value0);
    };
    return Just2;
  }();
  var maybe = function(v) {
    return function(v1) {
      return function(v2) {
        if (v2 instanceof Nothing) {
          return v;
        }
        ;
        if (v2 instanceof Just) {
          return v1(v2.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 237, column 1 - line 237, column 51): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
  var isNothing = /* @__PURE__ */ maybe(true)(/* @__PURE__ */ $$const(false));
  var functorMaybe = {
    map: function(v) {
      return function(v1) {
        if (v1 instanceof Just) {
          return new Just(v(v1.value0));
        }
        ;
        return Nothing.value;
      };
    }
  };
  var map2 = /* @__PURE__ */ map(functorMaybe);
  var fromMaybe = function(a) {
    return maybe(a)(identity3);
  };
  var eqMaybe = function(dictEq) {
    var eq6 = eq(dictEq);
    return {
      eq: function(x) {
        return function(y) {
          if (x instanceof Nothing && y instanceof Nothing) {
            return true;
          }
          ;
          if (x instanceof Just && y instanceof Just) {
            return eq6(x.value0)(y.value0);
          }
          ;
          return false;
        };
      }
    };
  };
  var applyMaybe = {
    apply: function(v) {
      return function(v1) {
        if (v instanceof Just) {
          return map2(v.value0)(v1);
        }
        ;
        if (v instanceof Nothing) {
          return Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [v.constructor.name, v1.constructor.name]);
      };
    },
    Functor0: function() {
      return functorMaybe;
    }
  };
  var bindMaybe = {
    bind: function(v) {
      return function(v1) {
        if (v instanceof Just) {
          return v1(v.value0);
        }
        ;
        if (v instanceof Nothing) {
          return Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [v.constructor.name, v1.constructor.name]);
      };
    },
    Apply0: function() {
      return applyMaybe;
    }
  };

  // output/Data.Either/index.js
  var Left = /* @__PURE__ */ function() {
    function Left2(value0) {
      this.value0 = value0;
    }
    ;
    Left2.create = function(value0) {
      return new Left2(value0);
    };
    return Left2;
  }();
  var Right = /* @__PURE__ */ function() {
    function Right2(value0) {
      this.value0 = value0;
    }
    ;
    Right2.create = function(value0) {
      return new Right2(value0);
    };
    return Right2;
  }();
  var functorEither = {
    map: function(f) {
      return function(m) {
        if (m instanceof Left) {
          return new Left(m.value0);
        }
        ;
        if (m instanceof Right) {
          return new Right(f(m.value0));
        }
        ;
        throw new Error("Failed pattern match at Data.Either (line 0, column 0 - line 0, column 0): " + [m.constructor.name]);
      };
    }
  };
  var either = function(v) {
    return function(v1) {
      return function(v2) {
        if (v2 instanceof Left) {
          return v(v2.value0);
        }
        ;
        if (v2 instanceof Right) {
          return v1(v2.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };

  // output/Effect/foreign.js
  var pureE = function(a) {
    return function() {
      return a;
    };
  };
  var bindE = function(a) {
    return function(f) {
      return function() {
        return f(a())();
      };
    };
  };

  // output/Data.EuclideanRing/foreign.js
  var intDegree = function(x) {
    return Math.min(Math.abs(x), 2147483647);
  };
  var intDiv = function(x) {
    return function(y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };
  var intMod = function(x) {
    return function(y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return (x % yy + yy) % yy;
    };
  };

  // output/Data.CommutativeRing/index.js
  var commutativeRingInt = {
    Ring0: function() {
      return ringInt;
    }
  };

  // output/Data.EuclideanRing/index.js
  var mod = function(dict) {
    return dict.mod;
  };
  var euclideanRingInt = {
    degree: intDegree,
    div: intDiv,
    mod: intMod,
    CommutativeRing0: function() {
      return commutativeRingInt;
    }
  };
  var div = function(dict) {
    return dict.div;
  };

  // output/Data.Monoid/index.js
  var mempty = function(dict) {
    return dict.mempty;
  };

  // output/Effect/index.js
  var $runtime_lazy = function(name15, moduleName, init2) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2) return val;
      if (state3 === 1) throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init2();
      state3 = 2;
      return val;
    };
  };
  var monadEffect = {
    Applicative0: function() {
      return applicativeEffect;
    },
    Bind1: function() {
      return bindEffect;
    }
  };
  var bindEffect = {
    bind: bindE,
    Apply0: function() {
      return $lazy_applyEffect(0);
    }
  };
  var applicativeEffect = {
    pure: pureE,
    Apply0: function() {
      return $lazy_applyEffect(0);
    }
  };
  var $lazy_functorEffect = /* @__PURE__ */ $runtime_lazy("functorEffect", "Effect", function() {
    return {
      map: liftA1(applicativeEffect)
    };
  });
  var $lazy_applyEffect = /* @__PURE__ */ $runtime_lazy("applyEffect", "Effect", function() {
    return {
      apply: ap(monadEffect),
      Functor0: function() {
        return $lazy_functorEffect(0);
      }
    };
  });
  var functorEffect = /* @__PURE__ */ $lazy_functorEffect(20);
  var applyEffect = /* @__PURE__ */ $lazy_applyEffect(23);

  // output/Control.Monad.Error.Class/index.js
  var throwError = function(dict) {
    return dict.throwError;
  };

  // output/Data.Identity/index.js
  var Identity = function(x) {
    return x;
  };
  var functorIdentity = {
    map: function(f) {
      return function(m) {
        return f(m);
      };
    }
  };
  var applyIdentity = {
    apply: function(v) {
      return function(v1) {
        return v(v1);
      };
    },
    Functor0: function() {
      return functorIdentity;
    }
  };
  var bindIdentity = {
    bind: function(v) {
      return function(f) {
        return f(v);
      };
    },
    Apply0: function() {
      return applyIdentity;
    }
  };
  var applicativeIdentity = {
    pure: Identity,
    Apply0: function() {
      return applyIdentity;
    }
  };
  var monadIdentity = {
    Applicative0: function() {
      return applicativeIdentity;
    },
    Bind1: function() {
      return bindIdentity;
    }
  };

  // output/Effect.Ref/foreign.js
  var _new = function(val) {
    return function() {
      return { value: val };
    };
  };
  var read = function(ref) {
    return function() {
      return ref.value;
    };
  };
  var write = function(val) {
    return function(ref) {
      return function() {
        ref.value = val;
      };
    };
  };

  // output/Effect.Ref/index.js
  var $$new = _new;

  // output/Unsafe.Coerce/foreign.js
  var unsafeCoerce2 = function(x) {
    return x;
  };

  // output/Data.HeytingAlgebra/foreign.js
  var boolConj = function(b1) {
    return function(b2) {
      return b1 && b2;
    };
  };
  var boolDisj = function(b1) {
    return function(b2) {
      return b1 || b2;
    };
  };
  var boolNot = function(b) {
    return !b;
  };

  // output/Data.HeytingAlgebra/index.js
  var not = function(dict) {
    return dict.not;
  };
  var ff = function(dict) {
    return dict.ff;
  };
  var disj = function(dict) {
    return dict.disj;
  };
  var heytingAlgebraBoolean = {
    ff: false,
    tt: true,
    implies: function(a) {
      return function(b) {
        return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
    },
    conj: boolConj,
    disj: boolDisj,
    not: boolNot
  };

  // output/Control.Monad.Except.Trans/index.js
  var map3 = /* @__PURE__ */ map(functorEither);
  var ExceptT = function(x) {
    return x;
  };
  var runExceptT = function(v) {
    return v;
  };
  var mapExceptT = function(f) {
    return function(v) {
      return f(v);
    };
  };
  var functorExceptT = function(dictFunctor) {
    var map1 = map(dictFunctor);
    return {
      map: function(f) {
        return mapExceptT(map1(map3(f)));
      }
    };
  };
  var monadExceptT = function(dictMonad) {
    return {
      Applicative0: function() {
        return applicativeExceptT(dictMonad);
      },
      Bind1: function() {
        return bindExceptT(dictMonad);
      }
    };
  };
  var bindExceptT = function(dictMonad) {
    var bind6 = bind(dictMonad.Bind1());
    var pure5 = pure(dictMonad.Applicative0());
    return {
      bind: function(v) {
        return function(k) {
          return bind6(v)(either(function($193) {
            return pure5(Left.create($193));
          })(function(a) {
            var v1 = k(a);
            return v1;
          }));
        };
      },
      Apply0: function() {
        return applyExceptT(dictMonad);
      }
    };
  };
  var applyExceptT = function(dictMonad) {
    var functorExceptT1 = functorExceptT(dictMonad.Bind1().Apply0().Functor0());
    return {
      apply: ap(monadExceptT(dictMonad)),
      Functor0: function() {
        return functorExceptT1;
      }
    };
  };
  var applicativeExceptT = function(dictMonad) {
    return {
      pure: function() {
        var $194 = pure(dictMonad.Applicative0());
        return function($195) {
          return ExceptT($194(Right.create($195)));
        };
      }(),
      Apply0: function() {
        return applyExceptT(dictMonad);
      }
    };
  };
  var monadThrowExceptT = function(dictMonad) {
    var monadExceptT1 = monadExceptT(dictMonad);
    return {
      throwError: function() {
        var $204 = pure(dictMonad.Applicative0());
        return function($205) {
          return ExceptT($204(Left.create($205)));
        };
      }(),
      Monad0: function() {
        return monadExceptT1;
      }
    };
  };

  // output/Data.Array/foreign.js
  var replicateFill = function(count, value12) {
    if (count < 1) {
      return [];
    }
    var result = new Array(count);
    return result.fill(value12);
  };
  var replicatePolyfill = function(count, value12) {
    var result = [];
    var n = 0;
    for (var i = 0; i < count; i++) {
      result[n++] = value12;
    }
    return result;
  };
  var replicateImpl = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;
  var length = function(xs) {
    return xs.length;
  };
  var indexImpl = function(just, nothing, xs, i) {
    return i < 0 || i >= xs.length ? nothing : just(xs[i]);
  };
  var sliceImpl = function(s, e, l) {
    return l.slice(s, e);
  };

  // output/Data.Foldable/foreign.js
  var foldrArray = function(f) {
    return function(init2) {
      return function(xs) {
        var acc = init2;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };
  var foldlArray = function(f) {
    return function(init2) {
      return function(xs) {
        var acc = init2;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };

  // output/Control.Plus/index.js
  var empty = function(dict) {
    return dict.empty;
  };

  // output/Data.Monoid.Disj/index.js
  var Disj = function(x) {
    return x;
  };
  var semigroupDisj = function(dictHeytingAlgebra) {
    var disj2 = disj(dictHeytingAlgebra);
    return {
      append: function(v) {
        return function(v1) {
          return disj2(v)(v1);
        };
      }
    };
  };
  var monoidDisj = function(dictHeytingAlgebra) {
    var semigroupDisj1 = semigroupDisj(dictHeytingAlgebra);
    return {
      mempty: ff(dictHeytingAlgebra),
      Semigroup0: function() {
        return semigroupDisj1;
      }
    };
  };

  // output/Safe.Coerce/index.js
  var coerce = function() {
    return unsafeCoerce2;
  };

  // output/Data.Newtype/index.js
  var coerce2 = /* @__PURE__ */ coerce();
  var alaF = function() {
    return function() {
      return function() {
        return function() {
          return function(v) {
            return coerce2;
          };
        };
      };
    };
  };

  // output/Data.Foldable/index.js
  var alaF2 = /* @__PURE__ */ alaF()()()();
  var foldr = function(dict) {
    return dict.foldr;
  };
  var traverse_ = function(dictApplicative) {
    var applySecond3 = applySecond(dictApplicative.Apply0());
    var pure5 = pure(dictApplicative);
    return function(dictFoldable) {
      var foldr22 = foldr(dictFoldable);
      return function(f) {
        return foldr22(function($454) {
          return applySecond3(f($454));
        })(pure5(unit));
      };
    };
  };
  var for_ = function(dictApplicative) {
    var traverse_1 = traverse_(dictApplicative);
    return function(dictFoldable) {
      return flip(traverse_1(dictFoldable));
    };
  };
  var foldl = function(dict) {
    return dict.foldl;
  };
  var foldMapDefaultR = function(dictFoldable) {
    var foldr22 = foldr(dictFoldable);
    return function(dictMonoid) {
      var append3 = append(dictMonoid.Semigroup0());
      var mempty2 = mempty(dictMonoid);
      return function(f) {
        return foldr22(function(x) {
          return function(acc) {
            return append3(f(x))(acc);
          };
        })(mempty2);
      };
    };
  };
  var foldableArray = {
    foldr: foldrArray,
    foldl: foldlArray,
    foldMap: function(dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
    }
  };
  var foldMap = function(dict) {
    return dict.foldMap;
  };
  var any = function(dictFoldable) {
    var foldMap2 = foldMap(dictFoldable);
    return function(dictHeytingAlgebra) {
      return alaF2(Disj)(foldMap2(monoidDisj(dictHeytingAlgebra)));
    };
  };
  var elem = function(dictFoldable) {
    var any1 = any(dictFoldable)(heytingAlgebraBoolean);
    return function(dictEq) {
      var $462 = eq(dictEq);
      return function($463) {
        return any1($462($463));
      };
    };
  };
  var notElem = function(dictFoldable) {
    var elem1 = elem(dictFoldable);
    return function(dictEq) {
      var elem22 = elem1(dictEq);
      return function(x) {
        var $464 = elem22(x);
        return function($465) {
          return !$464($465);
        };
      };
    };
  };

  // output/Data.Function.Uncurried/foreign.js
  var runFn2 = function(fn) {
    return function(a) {
      return function(b) {
        return fn(a, b);
      };
    };
  };
  var runFn3 = function(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return fn(a, b, c);
        };
      };
    };
  };
  var runFn4 = function(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };

  // output/Data.Array/index.js
  var slice = /* @__PURE__ */ runFn3(sliceImpl);
  var take = function(n) {
    return function(xs) {
      var $152 = n < 1;
      if ($152) {
        return [];
      }
      ;
      return slice(0)(n)(xs);
    };
  };
  var replicate = /* @__PURE__ */ runFn2(replicateImpl);
  var index = /* @__PURE__ */ function() {
    return runFn4(indexImpl)(Just.create)(Nothing.value);
  }();
  var foldl2 = /* @__PURE__ */ foldl(foldableArray);
  var dropEnd = function(n) {
    return function(xs) {
      return take(length(xs) - n | 0)(xs);
    };
  };
  var drop = function(n) {
    return function(xs) {
      var $173 = n < 1;
      if ($173) {
        return xs;
      }
      ;
      return slice(n)(length(xs))(xs);
    };
  };

  // output/Data.Int/foreign.js
  var fromNumberImpl = function(just) {
    return function(nothing) {
      return function(n) {
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };
  var toNumber = function(n) {
    return n;
  };
  var fromStringAsImpl = function(just) {
    return function(nothing) {
      return function(radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern2 = new RegExp("^[\\+\\-]?" + digits + "+$", "i");
        return function(s) {
          if (pattern2.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };

  // output/Data.Number/foreign.js
  var isFiniteImpl = isFinite;
  var floor = Math.floor;

  // output/Data.Number/index.js
  var pi = 3.141592653589793;

  // output/Data.Int/index.js
  var top2 = /* @__PURE__ */ top(boundedInt);
  var bottom2 = /* @__PURE__ */ bottom(boundedInt);
  var fromStringAs = /* @__PURE__ */ function() {
    return fromStringAsImpl(Just.create)(Nothing.value);
  }();
  var fromString = /* @__PURE__ */ fromStringAs(10);
  var fromNumber = /* @__PURE__ */ function() {
    return fromNumberImpl(Just.create)(Nothing.value);
  }();
  var unsafeClamp = function(x) {
    if (!isFiniteImpl(x)) {
      return 0;
    }
    ;
    if (x >= toNumber(top2)) {
      return top2;
    }
    ;
    if (x <= toNumber(bottom2)) {
      return bottom2;
    }
    ;
    if (otherwise) {
      return fromMaybe(0)(fromNumber(x));
    }
    ;
    throw new Error("Failed pattern match at Data.Int (line 72, column 1 - line 72, column 29): " + [x.constructor.name]);
  };
  var floor2 = function($39) {
    return unsafeClamp(floor($39));
  };

  // output/Data.Show.Generic/foreign.js
  var intercalate2 = function(separator) {
    return function(xs) {
      return xs.join(separator);
    };
  };

  // output/Data.Show.Generic/index.js
  var append2 = /* @__PURE__ */ append(semigroupArray);
  var genericShowArgsNoArguments = {
    genericShowArgs: function(v) {
      return [];
    }
  };
  var genericShowArgs = function(dict) {
    return dict.genericShowArgs;
  };
  var genericShowConstructor = function(dictGenericShowArgs) {
    var genericShowArgs1 = genericShowArgs(dictGenericShowArgs);
    return function(dictIsSymbol) {
      var reflectSymbol2 = reflectSymbol(dictIsSymbol);
      return {
        "genericShow'": function(v) {
          var ctor = reflectSymbol2($$Proxy.value);
          var v1 = genericShowArgs1(v);
          if (v1.length === 0) {
            return ctor;
          }
          ;
          return "(" + (intercalate2(" ")(append2([ctor])(v1)) + ")");
        }
      };
    };
  };
  var genericShow$prime = function(dict) {
    return dict["genericShow'"];
  };
  var genericShowSum = function(dictGenericShow) {
    var genericShow$prime1 = genericShow$prime(dictGenericShow);
    return function(dictGenericShow1) {
      var genericShow$prime2 = genericShow$prime(dictGenericShow1);
      return {
        "genericShow'": function(v) {
          if (v instanceof Inl) {
            return genericShow$prime1(v.value0);
          }
          ;
          if (v instanceof Inr) {
            return genericShow$prime2(v.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Show.Generic (line 26, column 1 - line 28, column 40): " + [v.constructor.name]);
        }
      };
    };
  };
  var genericShow = function(dictGeneric) {
    var from2 = from(dictGeneric);
    return function(dictGenericShow) {
      var genericShow$prime1 = genericShow$prime(dictGenericShow);
      return function(x) {
        return genericShow$prime1(from2(x));
      };
    };
  };

  // output/Data.String.Common/foreign.js
  var split = function(sep) {
    return function(s) {
      return s.split(sep);
    };
  };
  var trim = function(s) {
    return s.trim();
  };
  var joinWith = function(s) {
    return function(xs) {
      return xs.join(s);
    };
  };

  // output/Effect.AVar/foreign.js
  var AVar = function() {
    function MutableQueue() {
      this.head = null;
      this.last = null;
      this.size = 0;
    }
    function MutableCell(queue, value12) {
      this.queue = queue;
      this.value = value12;
      this.next = null;
      this.prev = null;
    }
    function AVar2(value12) {
      this.draining = false;
      this.error = null;
      this.value = value12;
      this.takes = new MutableQueue();
      this.reads = new MutableQueue();
      this.puts = new MutableQueue();
    }
    var EMPTY = {};
    function runEff(eff) {
      try {
        eff();
      } catch (error3) {
        setTimeout(function() {
          throw error3;
        }, 0);
      }
    }
    function putLast(queue, value12) {
      var cell = new MutableCell(queue, value12);
      switch (queue.size) {
        case 0:
          queue.head = cell;
          break;
        case 1:
          cell.prev = queue.head;
          queue.head.next = cell;
          queue.last = cell;
          break;
        default:
          cell.prev = queue.last;
          queue.last.next = cell;
          queue.last = cell;
      }
      queue.size++;
      return cell;
    }
    function takeLast(queue) {
      var cell;
      switch (queue.size) {
        case 0:
          return null;
        case 1:
          cell = queue.head;
          queue.head = null;
          break;
        case 2:
          cell = queue.last;
          queue.head.next = null;
          queue.last = null;
          break;
        default:
          cell = queue.last;
          queue.last = cell.prev;
          queue.last.next = null;
      }
      cell.prev = null;
      cell.queue = null;
      queue.size--;
      return cell.value;
    }
    function takeHead(queue) {
      var cell;
      switch (queue.size) {
        case 0:
          return null;
        case 1:
          cell = queue.head;
          queue.head = null;
          break;
        case 2:
          cell = queue.head;
          queue.last.prev = null;
          queue.head = queue.last;
          queue.last = null;
          break;
        default:
          cell = queue.head;
          queue.head = cell.next;
          queue.head.prev = null;
      }
      cell.next = null;
      cell.queue = null;
      queue.size--;
      return cell.value;
    }
    function deleteCell2(cell) {
      if (cell.queue === null) {
        return;
      }
      if (cell.queue.last === cell) {
        takeLast(cell.queue);
        return;
      }
      if (cell.queue.head === cell) {
        takeHead(cell.queue);
        return;
      }
      if (cell.prev) {
        cell.prev.next = cell.next;
      }
      if (cell.next) {
        cell.next.prev = cell.prev;
      }
      cell.queue.size--;
      cell.queue = null;
      cell.value = null;
      cell.next = null;
      cell.prev = null;
    }
    function drainVar(util, avar) {
      if (avar.draining) {
        return;
      }
      var ps = avar.puts;
      var ts = avar.takes;
      var rs = avar.reads;
      var p, r, t, value12, rsize;
      avar.draining = true;
      while (1) {
        p = null;
        r = null;
        t = null;
        value12 = avar.value;
        rsize = rs.size;
        if (avar.error !== null) {
          value12 = util.left(avar.error);
          while (p = takeHead(ps)) {
            runEff(p.cb(value12));
          }
          while (r = takeHead(rs)) {
            runEff(r(value12));
          }
          while (t = takeHead(ts)) {
            runEff(t(value12));
          }
          break;
        }
        if (value12 === EMPTY && (p = takeHead(ps))) {
          avar.value = value12 = p.value;
        }
        if (value12 !== EMPTY) {
          t = takeHead(ts);
          while (rsize-- && (r = takeHead(rs))) {
            runEff(r(util.right(value12)));
          }
          if (t !== null) {
            avar.value = EMPTY;
            runEff(t(util.right(value12)));
          }
        }
        if (p !== null) {
          runEff(p.cb(util.right(void 0)));
        }
        if (avar.value === EMPTY && ps.size === 0 || avar.value !== EMPTY && ts.size === 0) {
          break;
        }
      }
      avar.draining = false;
    }
    AVar2.EMPTY = EMPTY;
    AVar2.putLast = putLast;
    AVar2.takeLast = takeLast;
    AVar2.takeHead = takeHead;
    AVar2.deleteCell = deleteCell2;
    AVar2.drainVar = drainVar;
    return AVar2;
  }();
  function empty2() {
    return new AVar(AVar.EMPTY);
  }
  function _newVar(value12) {
    return function() {
      return new AVar(value12);
    };
  }
  function _putVar(util, value12, avar, cb) {
    return function() {
      var cell = AVar.putLast(avar.puts, { cb, value: value12 });
      AVar.drainVar(util, avar);
      return function() {
        AVar.deleteCell(cell);
      };
    };
  }
  function _takeVar(util, avar, cb) {
    return function() {
      var cell = AVar.putLast(avar.takes, cb);
      AVar.drainVar(util, avar);
      return function() {
        AVar.deleteCell(cell);
      };
    };
  }
  function _tryPutVar(util, value12, avar) {
    return function() {
      if (avar.value === AVar.EMPTY && avar.error === null) {
        avar.value = value12;
        AVar.drainVar(util, avar);
        return true;
      } else {
        return false;
      }
    };
  }
  function _tryTakeVar(util, avar) {
    return function() {
      var value12 = avar.value;
      if (value12 === AVar.EMPTY) {
        return util.nothing;
      } else {
        avar.value = AVar.EMPTY;
        AVar.drainVar(util, avar);
        return util.just(value12);
      }
    };
  }
  function _tryReadVar(util, avar) {
    return function() {
      if (avar.value === AVar.EMPTY) {
        return util.nothing;
      } else {
        return util.just(avar.value);
      }
    };
  }

  // output/Effect.AVar/index.js
  var Killed = /* @__PURE__ */ function() {
    function Killed2(value0) {
      this.value0 = value0;
    }
    ;
    Killed2.create = function(value0) {
      return new Killed2(value0);
    };
    return Killed2;
  }();
  var Filled = /* @__PURE__ */ function() {
    function Filled2(value0) {
      this.value0 = value0;
    }
    ;
    Filled2.create = function(value0) {
      return new Filled2(value0);
    };
    return Filled2;
  }();
  var Empty = /* @__PURE__ */ function() {
    function Empty3() {
    }
    ;
    Empty3.value = new Empty3();
    return Empty3;
  }();
  var $$new2 = _newVar;
  var ffiUtil = /* @__PURE__ */ function() {
    return {
      left: Left.create,
      right: Right.create,
      nothing: Nothing.value,
      just: Just.create,
      killed: Killed.create,
      filled: Filled.create,
      empty: Empty.value
    };
  }();
  var put = function(value12) {
    return function(avar) {
      return function(cb) {
        return _putVar(ffiUtil, value12, avar, cb);
      };
    };
  };
  var take2 = function(avar) {
    return function(cb) {
      return _takeVar(ffiUtil, avar, cb);
    };
  };
  var tryPut = function(value12) {
    return function(avar) {
      return _tryPutVar(ffiUtil, value12, avar);
    };
  };
  var tryRead = function(avar) {
    return _tryReadVar(ffiUtil, avar);
  };
  var tryTake = function(avar) {
    return _tryTakeVar(ffiUtil, avar);
  };

  // output/Effect.Console/foreign.js
  var log2 = function(s) {
    return function() {
      console.log(s);
    };
  };

  // output/Foreign/foreign.js
  function tagOf(value12) {
    return Object.prototype.toString.call(value12).slice(8, -1);
  }
  var isArray = Array.isArray || function(value12) {
    return Object.prototype.toString.call(value12) === "[object Array]";
  };

  // output/Data.NonEmpty/index.js
  var NonEmpty = /* @__PURE__ */ function() {
    function NonEmpty2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    NonEmpty2.create = function(value0) {
      return function(value1) {
        return new NonEmpty2(value0, value1);
      };
    };
    return NonEmpty2;
  }();
  var singleton2 = function(dictPlus) {
    var empty4 = empty(dictPlus);
    return function(a) {
      return new NonEmpty(a, empty4);
    };
  };

  // output/Data.List.Types/index.js
  var Nil = /* @__PURE__ */ function() {
    function Nil2() {
    }
    ;
    Nil2.value = new Nil2();
    return Nil2;
  }();
  var Cons = /* @__PURE__ */ function() {
    function Cons2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Cons2.create = function(value0) {
      return function(value1) {
        return new Cons2(value0, value1);
      };
    };
    return Cons2;
  }();
  var NonEmptyList = function(x) {
    return x;
  };
  var listMap = function(f) {
    var chunkedRevMap = function($copy_v) {
      return function($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
          if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Cons)) {
            $tco_var_v = new Cons(v1, v);
            $copy_v1 = v1.value1.value1.value1;
            return;
          }
          ;
          var unrolledMap = function(v2) {
            if (v2 instanceof Cons && (v2.value1 instanceof Cons && v2.value1.value1 instanceof Nil)) {
              return new Cons(f(v2.value0), new Cons(f(v2.value1.value0), Nil.value));
            }
            ;
            if (v2 instanceof Cons && v2.value1 instanceof Nil) {
              return new Cons(f(v2.value0), Nil.value);
            }
            ;
            return Nil.value;
          };
          var reverseUnrolledMap = function($copy_v2) {
            return function($copy_v3) {
              var $tco_var_v2 = $copy_v2;
              var $tco_done1 = false;
              var $tco_result2;
              function $tco_loop2(v2, v3) {
                if (v2 instanceof Cons && (v2.value0 instanceof Cons && (v2.value0.value1 instanceof Cons && v2.value0.value1.value1 instanceof Cons))) {
                  $tco_var_v2 = v2.value1;
                  $copy_v3 = new Cons(f(v2.value0.value0), new Cons(f(v2.value0.value1.value0), new Cons(f(v2.value0.value1.value1.value0), v3)));
                  return;
                }
                ;
                $tco_done1 = true;
                return v3;
              }
              ;
              while (!$tco_done1) {
                $tco_result2 = $tco_loop2($tco_var_v2, $copy_v3);
              }
              ;
              return $tco_result2;
            };
          };
          $tco_done = true;
          return reverseUnrolledMap(v)(unrolledMap(v1));
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_v1);
        }
        ;
        return $tco_result;
      };
    };
    return chunkedRevMap(Nil.value);
  };
  var functorList = {
    map: listMap
  };
  var map4 = /* @__PURE__ */ map(functorList);
  var foldableList = {
    foldr: function(f) {
      return function(b) {
        var rev3 = function() {
          var go2 = function($copy_v) {
            return function($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                if (v1 instanceof Nil) {
                  $tco_done = true;
                  return v;
                }
                ;
                if (v1 instanceof Cons) {
                  $tco_var_v = new Cons(v1.value0, v);
                  $copy_v1 = v1.value1;
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.List.Types (line 107, column 7 - line 107, column 23): " + [v.constructor.name, v1.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
              }
              ;
              return $tco_result;
            };
          };
          return go2(Nil.value);
        }();
        var $284 = foldl(foldableList)(flip(f))(b);
        return function($285) {
          return $284(rev3($285));
        };
      };
    },
    foldl: function(f) {
      var go2 = function($copy_b) {
        return function($copy_v) {
          var $tco_var_b = $copy_b;
          var $tco_done1 = false;
          var $tco_result;
          function $tco_loop(b, v) {
            if (v instanceof Nil) {
              $tco_done1 = true;
              return b;
            }
            ;
            if (v instanceof Cons) {
              $tco_var_b = f(b)(v.value0);
              $copy_v = v.value1;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.List.Types (line 111, column 12 - line 113, column 30): " + [v.constructor.name]);
          }
          ;
          while (!$tco_done1) {
            $tco_result = $tco_loop($tco_var_b, $copy_v);
          }
          ;
          return $tco_result;
        };
      };
      return go2;
    },
    foldMap: function(dictMonoid) {
      var append22 = append(dictMonoid.Semigroup0());
      var mempty2 = mempty(dictMonoid);
      return function(f) {
        return foldl(foldableList)(function(acc) {
          var $286 = append22(acc);
          return function($287) {
            return $286(f($287));
          };
        })(mempty2);
      };
    }
  };
  var foldr2 = /* @__PURE__ */ foldr(foldableList);
  var semigroupList = {
    append: function(xs) {
      return function(ys) {
        return foldr2(Cons.create)(ys)(xs);
      };
    }
  };
  var append1 = /* @__PURE__ */ append(semigroupList);
  var applyList = {
    apply: function(v) {
      return function(v1) {
        if (v instanceof Nil) {
          return Nil.value;
        }
        ;
        if (v instanceof Cons) {
          return append1(map4(v.value0)(v1))(apply(applyList)(v.value1)(v1));
        }
        ;
        throw new Error("Failed pattern match at Data.List.Types (line 157, column 1 - line 159, column 48): " + [v.constructor.name, v1.constructor.name]);
      };
    },
    Functor0: function() {
      return functorList;
    }
  };
  var bindList = {
    bind: function(v) {
      return function(v1) {
        if (v instanceof Nil) {
          return Nil.value;
        }
        ;
        if (v instanceof Cons) {
          return append1(v1(v.value0))(bind(bindList)(v.value1)(v1));
        }
        ;
        throw new Error("Failed pattern match at Data.List.Types (line 164, column 1 - line 166, column 37): " + [v.constructor.name, v1.constructor.name]);
      };
    },
    Apply0: function() {
      return applyList;
    }
  };
  var altList = {
    alt: append1,
    Functor0: function() {
      return functorList;
    }
  };
  var plusList = /* @__PURE__ */ function() {
    return {
      empty: Nil.value,
      Alt0: function() {
        return altList;
      }
    };
  }();

  // output/Data.List/index.js
  var bind2 = /* @__PURE__ */ bind(bindList);
  var identity4 = /* @__PURE__ */ identity(categoryFn);
  var reverse2 = /* @__PURE__ */ function() {
    var go2 = function($copy_v) {
      return function($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
          if (v1 instanceof Nil) {
            $tco_done = true;
            return v;
          }
          ;
          if (v1 instanceof Cons) {
            $tco_var_v = new Cons(v1.value0, v);
            $copy_v1 = v1.value1;
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [v.constructor.name, v1.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_v1);
        }
        ;
        return $tco_result;
      };
    };
    return go2(Nil.value);
  }();
  var $$null = function(v) {
    if (v instanceof Nil) {
      return true;
    }
    ;
    return false;
  };
  var index2 = function($copy_v) {
    return function($copy_v1) {
      var $tco_var_v = $copy_v;
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v, v1) {
        if (v instanceof Nil) {
          $tco_done = true;
          return Nothing.value;
        }
        ;
        if (v instanceof Cons && v1 === 0) {
          $tco_done = true;
          return new Just(v.value0);
        }
        ;
        if (v instanceof Cons) {
          $tco_var_v = v.value1;
          $copy_v1 = v1 - 1 | 0;
          return;
        }
        ;
        throw new Error("Failed pattern match at Data.List (line 281, column 1 - line 281, column 44): " + [v.constructor.name, v1.constructor.name]);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_v, $copy_v1);
      }
      ;
      return $tco_result;
    };
  };
  var filter = function(p) {
    var go2 = function($copy_v) {
      return function($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
          if (v1 instanceof Nil) {
            $tco_done = true;
            return reverse2(v);
          }
          ;
          if (v1 instanceof Cons) {
            if (p(v1.value0)) {
              $tco_var_v = new Cons(v1.value0, v);
              $copy_v1 = v1.value1;
              return;
            }
            ;
            if (otherwise) {
              $tco_var_v = v;
              $copy_v1 = v1.value1;
              return;
            }
            ;
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 390, column 3 - line 390, column 27): " + [v.constructor.name, v1.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_v1);
        }
        ;
        return $tco_result;
      };
    };
    return go2(Nil.value);
  };
  var concat2 = function(v) {
    return bind2(v)(identity4);
  };

  // output/Data.List.NonEmpty/index.js
  var singleton3 = /* @__PURE__ */ function() {
    var $200 = singleton2(plusList);
    return function($201) {
      return NonEmptyList($200($201));
    };
  }();

  // output/Data.String.CodeUnits/foreign.js
  var singleton4 = function(c) {
    return c;
  };
  var length3 = function(s) {
    return s.length;
  };
  var drop3 = function(n) {
    return function(s) {
      return s.substring(n);
    };
  };

  // output/Data.String.Unsafe/foreign.js
  var charAt = function(i) {
    return function(s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };

  // output/Foreign/index.js
  var TypeMismatch = /* @__PURE__ */ function() {
    function TypeMismatch2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    TypeMismatch2.create = function(value0) {
      return function(value1) {
        return new TypeMismatch2(value0, value1);
      };
    };
    return TypeMismatch2;
  }();
  var unsafeFromForeign = unsafeCoerce2;
  var fail = function(dictMonad) {
    var $153 = throwError(monadThrowExceptT(dictMonad));
    return function($154) {
      return $153(singleton3($154));
    };
  };
  var unsafeReadTagged = function(dictMonad) {
    var pure1 = pure(applicativeExceptT(dictMonad));
    var fail1 = fail(dictMonad);
    return function(tag) {
      return function(value12) {
        if (tagOf(value12) === tag) {
          return pure1(unsafeFromForeign(value12));
        }
        ;
        if (otherwise) {
          return fail1(new TypeMismatch(tag, tagOf(value12)));
        }
        ;
        throw new Error("Failed pattern match at Foreign (line 123, column 1 - line 123, column 104): " + [tag.constructor.name, value12.constructor.name]);
      };
    };
  };
  var readString = function(dictMonad) {
    return unsafeReadTagged(dictMonad)("String");
  };

  // output/Web.Event.EventTarget/foreign.js
  function eventListener(fn) {
    return function() {
      return function(event) {
        return fn(event)();
      };
    };
  }
  function addEventListener(type) {
    return function(listener) {
      return function(useCapture) {
        return function(target5) {
          return function() {
            return target5.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  }

  // output/Web.Socket.Event.EventTypes/index.js
  var onMessage = "message";

  // output/Web.Socket.Event.MessageEvent/foreign.js
  function data_(e) {
    return e.data;
  }

  // output/Web.Internal.FFI/foreign.js
  function _unsafeReadProtoTagged(nothing, just, name15, value12) {
    if (typeof window !== "undefined") {
      var ty = window[name15];
      if (ty != null && value12 instanceof ty) {
        return just(value12);
      }
    }
    var obj = value12;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name15) {
        return just(value12);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  }

  // output/Web.Internal.FFI/index.js
  var unsafeReadProtoTagged = function(name15) {
    return function(value12) {
      return _unsafeReadProtoTagged(Nothing.value, Just.create, name15, value12);
    };
  };

  // output/Web.Socket.Event.MessageEvent/index.js
  var fromEvent = /* @__PURE__ */ unsafeReadProtoTagged("MessageEvent");

  // output/Web.Socket.WebSocket/foreign.js
  function create(url3) {
    return function(protocols) {
      return function() {
        return new WebSocket(url3, protocols);
      };
    };
  }
  function sendImpl(ws) {
    return function(value12) {
      return function() {
        ws.send(value12);
      };
    };
  }

  // output/Data.Enum/foreign.js
  function toCharCode(c) {
    return c.charCodeAt(0);
  }
  function fromCharCode(c) {
    return String.fromCharCode(c);
  }

  // output/Data.Enum/index.js
  var bottom1 = /* @__PURE__ */ bottom(boundedChar);
  var top1 = /* @__PURE__ */ top(boundedChar);
  var toEnum = function(dict) {
    return dict.toEnum;
  };
  var fromEnum = function(dict) {
    return dict.fromEnum;
  };
  var toEnumWithDefaults = function(dictBoundedEnum) {
    var toEnum1 = toEnum(dictBoundedEnum);
    var fromEnum1 = fromEnum(dictBoundedEnum);
    var bottom22 = bottom(dictBoundedEnum.Bounded0());
    return function(low2) {
      return function(high2) {
        return function(x) {
          var v = toEnum1(x);
          if (v instanceof Just) {
            return v.value0;
          }
          ;
          if (v instanceof Nothing) {
            var $140 = x < fromEnum1(bottom22);
            if ($140) {
              return low2;
            }
            ;
            return high2;
          }
          ;
          throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [v.constructor.name]);
        };
      };
    };
  };
  var defaultSucc = function(toEnum$prime) {
    return function(fromEnum$prime) {
      return function(a) {
        return toEnum$prime(fromEnum$prime(a) + 1 | 0);
      };
    };
  };
  var defaultPred = function(toEnum$prime) {
    return function(fromEnum$prime) {
      return function(a) {
        return toEnum$prime(fromEnum$prime(a) - 1 | 0);
      };
    };
  };
  var charToEnum = function(v) {
    if (v >= toCharCode(bottom1) && v <= toCharCode(top1)) {
      return new Just(fromCharCode(v));
    }
    ;
    return Nothing.value;
  };
  var enumChar = {
    succ: /* @__PURE__ */ defaultSucc(charToEnum)(toCharCode),
    pred: /* @__PURE__ */ defaultPred(charToEnum)(toCharCode),
    Ord0: function() {
      return ordChar;
    }
  };
  var boundedEnumChar = /* @__PURE__ */ function() {
    return {
      cardinality: toCharCode(top1) - toCharCode(bottom1) | 0,
      toEnum: charToEnum,
      fromEnum: toCharCode,
      Bounded0: function() {
        return boundedChar;
      },
      Enum1: function() {
        return enumChar;
      }
    };
  }();

  // output/Web.Socket.WebSocket/index.js
  var toEventTarget = unsafeCoerce2;
  var sendString = sendImpl;

  // output/CS150241Project.Networking/index.js
  var genericShowConstructor2 = /* @__PURE__ */ genericShowConstructor(genericShowArgsNoArguments);
  var bind3 = /* @__PURE__ */ bind(bindMaybe);
  var show2 = /* @__PURE__ */ show(showInt);
  var pure2 = /* @__PURE__ */ pure(applicativeEffect);
  var $$void2 = /* @__PURE__ */ $$void(functorEffect);
  var append12 = /* @__PURE__ */ append(semigroupArray);
  var for_2 = /* @__PURE__ */ for_(applicativeEffect)(foldableArray);
  var readString2 = /* @__PURE__ */ readString(monadIdentity);
  var Player1 = /* @__PURE__ */ function() {
    function Player13() {
    }
    ;
    Player13.value = new Player13();
    return Player13;
  }();
  var Player2 = /* @__PURE__ */ function() {
    function Player23() {
    }
    ;
    Player23.value = new Player23();
    return Player23;
  }();
  var genericPlayerId_ = {
    to: function(x) {
      if (x instanceof Inl) {
        return Player1.value;
      }
      ;
      if (x instanceof Inr) {
        return Player2.value;
      }
      ;
      throw new Error("Failed pattern match at CS150241Project.Networking (line 34, column 1 - line 34, column 35): " + [x.constructor.name]);
    },
    from: function(x) {
      if (x instanceof Player1) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x instanceof Player2) {
        return new Inr(NoArguments.value);
      }
      ;
      throw new Error("Failed pattern match at CS150241Project.Networking (line 34, column 1 - line 34, column 35): " + [x.constructor.name]);
    }
  };
  var showPlayerId = {
    show: /* @__PURE__ */ genericShow(genericPlayerId_)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "Player1";
      }
    }))(/* @__PURE__ */ genericShowConstructor2({
      reflectSymbol: function() {
        return "Player2";
      }
    })))
  };
  var toPlayerId = function(n) {
    if (n === 1) {
      return new Just(Player1.value);
    }
    ;
    if (n === 2) {
      return new Just(Player2.value);
    }
    ;
    if (otherwise) {
      return Nothing.value;
    }
    ;
    throw new Error("Failed pattern match at CS150241Project.Networking (line 41, column 1 - line 41, column 36): " + [n.constructor.name]);
  };
  var toMessage = function(s) {
    var tokens = split(" ")(s);
    return bind3(bind3(bind3(index(tokens)(0))(fromString))(toPlayerId))(function(playerId) {
      var payload = joinWith(" ")(slice(1)(length(tokens))(tokens));
      return new Just({
        playerId,
        payload
      });
    });
  };
  var sendMessage = function(ws) {
    return function(message2) {
      return sendString(ws)(message2.payload);
    };
  };
  var connect = function(ipAddr) {
    return function(port2) {
      var addr = "ws://" + (ipAddr + (":" + show2(port2)));
      return function __do() {
        var ws = create(addr)([])();
        var avPlayerId = empty2();
        var avSendQueue = $$new2([])();
        var avRecvQueue = $$new2([])();
        var send = function(payload) {
          return function __do2() {
            var maybePlayerId = tryRead(avPlayerId)();
            if (maybePlayerId instanceof Nothing) {
              log2("Added to send queue: " + payload)();
              var doWhenFilled = function(v) {
                if (v instanceof Left) {
                  return pure2(unit);
                }
                ;
                if (v instanceof Right) {
                  return function __do3() {
                    $$void2(put(append12(v.value0)([payload]))(avSendQueue)(function(v1) {
                      return pure2(unit);
                    }))();
                    return unit;
                  };
                }
                ;
                throw new Error("Failed pattern match at CS150241Project.Networking (line 83, column 13 - line 83, column 46): " + [v.constructor.name]);
              };
              $$void2(take2(avSendQueue)(doWhenFilled))();
              return unit;
            }
            ;
            if (maybePlayerId instanceof Just) {
              var messageToSend = {
                playerId: maybePlayerId.value0,
                payload
              };
              return sendMessage(ws)(messageToSend)();
            }
            ;
            throw new Error("Failed pattern match at CS150241Project.Networking (line 78, column 7 - line 93, column 39): " + [maybePlayerId.constructor.name]);
          };
        };
        var recv = function __do2() {
          var maybeRecvQueue = tryTake(avRecvQueue)();
          if (maybeRecvQueue instanceof Nothing) {
            return [];
          }
          ;
          if (maybeRecvQueue instanceof Just) {
            $$void2(tryPut([])(avRecvQueue))();
            return maybeRecvQueue.value0;
          }
          ;
          throw new Error("Failed pattern match at CS150241Project.Networking (line 107, column 7 - line 111, column 25): " + [maybeRecvQueue.constructor.name]);
        };
        var processSendQueue = /* @__PURE__ */ function() {
          var doWhenSendQueueFilled = function(v) {
            if (v instanceof Left) {
              return pure2(unit);
            }
            ;
            if (v instanceof Right) {
              return for_2(v.value0)(send);
            }
            ;
            throw new Error("Failed pattern match at CS150241Project.Networking (line 98, column 9 - line 98, column 51): " + [v.constructor.name]);
          };
          return function __do2() {
            $$void2(take2(avSendQueue)(doWhenSendQueueFilled))();
            return unit;
          };
        }();
        var state3 = {
          avPlayerId,
          send,
          processSendQueue,
          recv
        };
        var addToRecvQueue = function(message2) {
          var doWhenFilled = function(v) {
            if (v instanceof Left) {
              return pure2(unit);
            }
            ;
            if (v instanceof Right) {
              return function __do2() {
                $$void2(put(append12(v.value0)([new Just(message2)]))(avRecvQueue)(function(v1) {
                  return pure2(unit);
                }))();
                return unit;
              };
            }
            ;
            throw new Error("Failed pattern match at CS150241Project.Networking (line 116, column 9 - line 116, column 42): " + [v.constructor.name]);
          };
          return function __do2() {
            $$void2(take2(avRecvQueue)(doWhenFilled))();
            return unit;
          };
        };
        var messageListener = eventListener(function(ev) {
          var v = fromEvent(ev);
          if (v instanceof Nothing) {
            return log2("Failed to convert Event to MessageEvent");
          }
          ;
          if (v instanceof Just) {
            var v1 = runExceptT(readString2(data_(v.value0)));
            if (v1 instanceof Left) {
              return log2("Failed to read Foreign as String");
            }
            ;
            if (v1 instanceof Right) {
              var v2 = toMessage(v1.value0);
              if (v2 instanceof Nothing) {
                return log2("Failed to make message from " + v1.value0);
              }
              ;
              if (v2 instanceof Just) {
                return function __do2() {
                  var maybePlayerId = tryRead(state3.avPlayerId)();
                  if (maybePlayerId instanceof Nothing) {
                    $$void2(put(v2.value0.playerId)(state3.avPlayerId)(function(v3) {
                      return pure2(unit);
                    }))();
                    return state3.processSendQueue();
                  }
                  ;
                  if (maybePlayerId instanceof Just) {
                    addToRecvQueue(v2.value0)();
                    return state3.processSendQueue();
                  }
                  ;
                  throw new Error("Failed pattern match at CS150241Project.Networking (line 140, column 21 - line 147, column 47): " + [maybePlayerId.constructor.name]);
                };
              }
              ;
              throw new Error("Failed pattern match at CS150241Project.Networking (line 135, column 17 - line 147, column 47): " + [v2.constructor.name]);
            }
            ;
            throw new Error("Failed pattern match at CS150241Project.Networking (line 132, column 13 - line 147, column 47): " + [v1.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at CS150241Project.Networking (line 127, column 5 - line 147, column 47): " + [v.constructor.name]);
        })();
        addEventListener(onMessage)(messageListener)(false)(toEventTarget(ws))();
        return state3;
      };
    };
  };

  // output/Data.Map.Internal/index.js
  var Leaf = /* @__PURE__ */ function() {
    function Leaf2() {
    }
    ;
    Leaf2.value = new Leaf2();
    return Leaf2;
  }();
  var Node = /* @__PURE__ */ function() {
    function Node2(value0, value1, value22, value32, value42, value52) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
      this.value4 = value42;
      this.value5 = value52;
    }
    ;
    Node2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return function(value42) {
              return function(value52) {
                return new Node2(value0, value1, value22, value32, value42, value52);
              };
            };
          };
        };
      };
    };
    return Node2;
  }();
  var unsafeNode = function(k, v, l, r) {
    if (l instanceof Leaf) {
      if (r instanceof Leaf) {
        return new Node(1, 1, k, v, l, r);
      }
      ;
      if (r instanceof Node) {
        return new Node(1 + r.value0 | 0, 1 + r.value1 | 0, k, v, l, r);
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 702, column 5 - line 706, column 39): " + [r.constructor.name]);
    }
    ;
    if (l instanceof Node) {
      if (r instanceof Leaf) {
        return new Node(1 + l.value0 | 0, 1 + l.value1 | 0, k, v, l, r);
      }
      ;
      if (r instanceof Node) {
        return new Node(1 + function() {
          var $280 = l.value0 > r.value0;
          if ($280) {
            return l.value0;
          }
          ;
          return r.value0;
        }() | 0, (1 + l.value1 | 0) + r.value1 | 0, k, v, l, r);
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 708, column 5 - line 712, column 68): " + [r.constructor.name]);
    }
    ;
    throw new Error("Failed pattern match at Data.Map.Internal (line 700, column 32 - line 712, column 68): " + [l.constructor.name]);
  };
  var singleton5 = function(k) {
    return function(v) {
      return new Node(1, 1, k, v, Leaf.value, Leaf.value);
    };
  };
  var unsafeBalancedNode = /* @__PURE__ */ function() {
    var height9 = function(v) {
      if (v instanceof Leaf) {
        return 0;
      }
      ;
      if (v instanceof Node) {
        return v.value0;
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 757, column 12 - line 759, column 26): " + [v.constructor.name]);
    };
    var rotateLeft = function(k, v, l, rk, rv, rl, rr) {
      if (rl instanceof Node && rl.value0 > height9(rr)) {
        return unsafeNode(rl.value2, rl.value3, unsafeNode(k, v, l, rl.value4), unsafeNode(rk, rv, rl.value5, rr));
      }
      ;
      return unsafeNode(rk, rv, unsafeNode(k, v, l, rl), rr);
    };
    var rotateRight = function(k, v, lk, lv, ll, lr, r) {
      if (lr instanceof Node && height9(ll) <= lr.value0) {
        return unsafeNode(lr.value2, lr.value3, unsafeNode(lk, lv, ll, lr.value4), unsafeNode(k, v, lr.value5, r));
      }
      ;
      return unsafeNode(lk, lv, ll, unsafeNode(k, v, lr, r));
    };
    return function(k, v, l, r) {
      if (l instanceof Leaf) {
        if (r instanceof Leaf) {
          return singleton5(k)(v);
        }
        ;
        if (r instanceof Node && r.value0 > 1) {
          return rotateLeft(k, v, l, r.value2, r.value3, r.value4, r.value5);
        }
        ;
        return unsafeNode(k, v, l, r);
      }
      ;
      if (l instanceof Node) {
        if (r instanceof Node) {
          if (r.value0 > (l.value0 + 1 | 0)) {
            return rotateLeft(k, v, l, r.value2, r.value3, r.value4, r.value5);
          }
          ;
          if (l.value0 > (r.value0 + 1 | 0)) {
            return rotateRight(k, v, l.value2, l.value3, l.value4, l.value5, r);
          }
          ;
        }
        ;
        if (r instanceof Leaf && l.value0 > 1) {
          return rotateRight(k, v, l.value2, l.value3, l.value4, l.value5, r);
        }
        ;
        return unsafeNode(k, v, l, r);
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 717, column 40 - line 738, column 34): " + [l.constructor.name]);
    };
  }();
  var lookup = function(dictOrd) {
    var compare2 = compare(dictOrd);
    return function(k) {
      var go2 = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
          if (v instanceof Leaf) {
            $tco_done = true;
            return Nothing.value;
          }
          ;
          if (v instanceof Node) {
            var v1 = compare2(k)(v.value2);
            if (v1 instanceof LT) {
              $copy_v = v.value4;
              return;
            }
            ;
            if (v1 instanceof GT) {
              $copy_v = v.value5;
              return;
            }
            ;
            if (v1 instanceof EQ) {
              $tco_done = true;
              return new Just(v.value3);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 283, column 7 - line 286, column 22): " + [v1.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 280, column 8 - line 286, column 22): " + [v.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
        }
        ;
        return $tco_result;
      };
      return go2;
    };
  };
  var insert = function(dictOrd) {
    var compare2 = compare(dictOrd);
    return function(k) {
      return function(v) {
        var go2 = function(v1) {
          if (v1 instanceof Leaf) {
            return singleton5(k)(v);
          }
          ;
          if (v1 instanceof Node) {
            var v2 = compare2(k)(v1.value2);
            if (v2 instanceof LT) {
              return unsafeBalancedNode(v1.value2, v1.value3, go2(v1.value4), v1.value5);
            }
            ;
            if (v2 instanceof GT) {
              return unsafeBalancedNode(v1.value2, v1.value3, v1.value4, go2(v1.value5));
            }
            ;
            if (v2 instanceof EQ) {
              return new Node(v1.value0, v1.value1, k, v, v1.value4, v1.value5);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 471, column 7 - line 474, column 35): " + [v2.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 8 - line 474, column 35): " + [v1.constructor.name]);
        };
        return go2;
      };
    };
  };
  var empty3 = /* @__PURE__ */ function() {
    return Leaf.value;
  }();

  // output/Effect.Timer/foreign.js
  function setTimeoutImpl(ms) {
    return function(fn) {
      return function() {
        return setTimeout(fn, ms);
      };
    };
  }

  // output/Effect.Timer/index.js
  var setTimeout2 = setTimeoutImpl;

  // output/Graphics.Canvas/foreign.js
  function tryLoadImageImpl(src9) {
    return function(e) {
      return function(f) {
        return function() {
          var img = new Image();
          img.src = src9;
          img.addEventListener("load", function() {
            f(img)();
          }, false);
          img.addEventListener("error", function() {
            e();
          }, false);
        };
      };
    };
  }
  function getCanvasElementByIdImpl(id2, Just2, Nothing2) {
    return function() {
      var el = document.getElementById(id2);
      if (el && el instanceof HTMLCanvasElement) {
        return Just2(el);
      } else {
        return Nothing2;
      }
    };
  }
  function getContext2D(c) {
    return function() {
      return c.getContext("2d");
    };
  }
  function setCanvasWidth(canvas) {
    return function(width9) {
      return function() {
        canvas.width = width9;
      };
    };
  }
  function setCanvasHeight(canvas) {
    return function(height9) {
      return function() {
        canvas.height = height9;
      };
    };
  }
  function setFillStyle(ctx) {
    return function(style) {
      return function() {
        ctx.fillStyle = style;
      };
    };
  }
  function beginPath(ctx) {
    return function() {
      ctx.beginPath();
    };
  }
  function fill(ctx) {
    return function() {
      ctx.fill();
    };
  }
  function arc(ctx) {
    return function(a) {
      return function() {
        ctx.arc(a.x, a.y, a.radius, a.start, a.end, a.useCounterClockwise);
      };
    };
  }
  function rect(ctx) {
    return function(r) {
      return function() {
        ctx.rect(r.x, r.y, r.width, r.height);
      };
    };
  }
  function setFont(ctx) {
    return function(fontspec) {
      return function() {
        ctx.font = fontspec;
      };
    };
  }
  function fillText(ctx) {
    return function(text5) {
      return function(x) {
        return function(y) {
          return function() {
            ctx.fillText(text5, x, y);
          };
        };
      };
    };
  }
  function measureText(ctx) {
    return function(text5) {
      return function() {
        return ctx.measureText(text5);
      };
    };
  }
  function drawImageScale(ctx) {
    return function(image_source) {
      return function(dx) {
        return function(dy) {
          return function(dWidth) {
            return function(dHeight) {
              return function() {
                ctx.drawImage(image_source, dx, dy, dWidth, dHeight);
              };
            };
          };
        };
      };
    };
  }

  // output/Graphics.Canvas/index.js
  var applySecond2 = /* @__PURE__ */ applySecond(applyEffect);
  var tryLoadImage = function(path) {
    return function(k) {
      return tryLoadImageImpl(path)(k(Nothing.value))(function($54) {
        return k(Just.create($54));
      });
    };
  };
  var setCanvasDimensions = function(ce) {
    return function(d) {
      return applySecond2(setCanvasHeight(ce)(d.height))(setCanvasWidth(ce)(d.width));
    };
  };
  var getCanvasElementById = function(elId) {
    return getCanvasElementByIdImpl(elId, Just.create, Nothing.value);
  };

  // output/Web.DOM.Document/foreign.js
  var getEffProp = function(name15) {
    return function(doc) {
      return function() {
        return doc[name15];
      };
    };
  };
  var url2 = getEffProp("URL");
  var documentURI = getEffProp("documentURI");
  var origin2 = getEffProp("origin");
  var compatMode = getEffProp("compatMode");
  var characterSet = getEffProp("characterSet");
  var contentType = getEffProp("contentType");
  var _documentElement = getEffProp("documentElement");

  // output/Data.Nullable/foreign.js
  function nullable(a, r, f) {
    return a == null ? r : f(a);
  }

  // output/Data.Nullable/index.js
  var toMaybe = function(n) {
    return nullable(n, Nothing.value, Just.create);
  };

  // output/Web.DOM.Document/index.js
  var toNonElementParentNode = unsafeCoerce2;

  // output/Web.DOM.Element/foreign.js
  var getProp = function(name15) {
    return function(doctype) {
      return doctype[name15];
    };
  };
  var _namespaceURI = getProp("namespaceURI");
  var _prefix = getProp("prefix");
  var localName = getProp("localName");
  var tagName = getProp("tagName");

  // output/Web.DOM.ParentNode/foreign.js
  var getEffProp2 = function(name15) {
    return function(node) {
      return function() {
        return node[name15];
      };
    };
  };
  var children = getEffProp2("children");
  var _firstElementChild = getEffProp2("firstElementChild");
  var _lastElementChild = getEffProp2("lastElementChild");
  var childElementCount = getEffProp2("childElementCount");

  // output/Web.DOM.Element/index.js
  var toEventTarget2 = unsafeCoerce2;

  // output/Web.DOM.NonElementParentNode/foreign.js
  function _getElementById(id2) {
    return function(node) {
      return function() {
        return node.getElementById(id2);
      };
    };
  }

  // output/Web.DOM.NonElementParentNode/index.js
  var map5 = /* @__PURE__ */ map(functorEffect);
  var getElementById = function(eid) {
    var $2 = map5(toMaybe);
    var $3 = _getElementById(eid);
    return function($4) {
      return $2($3($4));
    };
  };

  // output/Web.Event.Event/foreign.js
  function preventDefault(e) {
    return function() {
      return e.preventDefault();
    };
  }

  // output/Web.HTML/foreign.js
  var windowImpl = function() {
    return window;
  };

  // output/Web.HTML.HTMLDocument/index.js
  var toEventTarget3 = unsafeCoerce2;
  var toDocument = unsafeCoerce2;

  // output/Web.HTML.Window/foreign.js
  function document2(window2) {
    return function() {
      return window2.document;
    };
  }
  function requestAnimationFrame(fn) {
    return function(window2) {
      return function() {
        return window2.requestAnimationFrame(fn);
      };
    };
  }

  // output/Web.UIEvent.KeyboardEvent/foreign.js
  function code(e) {
    return e.code;
  }

  // output/Web.UIEvent.KeyboardEvent/index.js
  var fromEvent2 = /* @__PURE__ */ unsafeReadProtoTagged("KeyboardEvent");

  // output/Web.UIEvent.MouseEvent/foreign.js
  function clientX(e) {
    return e.clientX;
  }
  function clientY(e) {
    return e.clientY;
  }

  // output/Web.UIEvent.MouseEvent/index.js
  var fromEvent3 = /* @__PURE__ */ unsafeReadProtoTagged("MouseEvent");

  // output/CS150241Project.GameEngine/index.js
  var $$void3 = /* @__PURE__ */ $$void(functorEffect);
  var div2 = /* @__PURE__ */ div(euclideanRingInt);
  var pure3 = /* @__PURE__ */ pure(applicativeEffect);
  var for_3 = /* @__PURE__ */ for_(applicativeEffect)(foldableArray);
  var insert2 = /* @__PURE__ */ insert(ordString);
  var gameLoop = function(engine) {
    return function __do() {
      var w = windowImpl();
      return $$void3(setTimeout2(div2(1e3)(engine.fps))($$void3(flip(requestAnimationFrame)(w)(function __do2() {
        var state1 = read(engine.refState)();
        var state22 = engine.onTick(engine.networkingState.send)(state1)();
        var messages = engine.networkingState.recv();
        var state3 = foldl2(function(acc) {
          return function(maybeMsg) {
            if (maybeMsg instanceof Nothing) {
              return acc;
            }
            ;
            if (maybeMsg instanceof Just) {
              return function __do3() {
                var state4 = acc();
                return engine.onMessage(engine.networkingState.send)(maybeMsg.value0)(state4)();
              };
            }
            ;
            throw new Error("Failed pattern match at CS150241Project.GameEngine (line 162, column 13 - line 166, column 71): " + [maybeMsg.constructor.name]);
          };
        })(pure3(state22))(messages)();
        write(state3)(engine.refState)();
        var images3 = read(engine.refImages)();
        engine.onRender(images3)(engine.ctx)(state3)();
        return gameLoop(engine)();
      }))))();
    };
  };
  var startNetworkGame = function(settings) {
    return function __do() {
      var networkingState = connect(settings.ipAddress)(settings.port)();
      var w = windowImpl();
      var doc = document2(w)();
      var maybeCanvas = getCanvasElementById("cs150-game-canvas")();
      var maybeElemCanvas = getElementById("cs150-game-canvas")(toNonElementParentNode(toDocument(doc)))();
      var initState = settings.initialState();
      var refState = $$new(initState)();
      var refImages = $$new(empty3)();
      for_3(settings.imagePaths)(function(path) {
        return tryLoadImage(path)(function(maybeImg) {
          if (maybeImg instanceof Nothing) {
            return pure3(unit);
          }
          ;
          if (maybeImg instanceof Just) {
            return function __do2() {
              var images3 = read(refImages)();
              return write(insert2(path)(maybeImg.value0)(images3))(refImages)();
            };
          }
          ;
          throw new Error("Failed pattern match at CS150241Project.GameEngine (line 83, column 15 - line 87, column 67): " + [maybeImg.constructor.name]);
        });
      })();
      var keyDownHandler = eventListener(function(e) {
        var v = fromEvent2(e);
        if (v instanceof Just) {
          return function __do2() {
            preventDefault(e)();
            var state3 = read(refState)();
            var newState = settings.onKeyDown(networkingState.send)(code(v.value0))(state3)();
            return write(newState)(refState)();
          };
        }
        ;
        if (v instanceof Nothing) {
          return pure3(unit);
        }
        ;
        throw new Error("Failed pattern match at CS150241Project.GameEngine (line 92, column 13 - line 98, column 29): " + [v.constructor.name]);
      })();
      var keyUpHandler = eventListener(function(e) {
        var v = fromEvent2(e);
        if (v instanceof Just) {
          return function __do2() {
            preventDefault(e)();
            var state3 = read(refState)();
            var newState = settings.onKeyUp(networkingState.send)(code(v.value0))(state3)();
            return write(newState)(refState)();
          };
        }
        ;
        if (v instanceof Nothing) {
          return pure3(unit);
        }
        ;
        throw new Error("Failed pattern match at CS150241Project.GameEngine (line 102, column 13 - line 108, column 29): " + [v.constructor.name]);
      })();
      var mouseDownHandler = eventListener(function(e) {
        var v = fromEvent3(e);
        if (v instanceof Just) {
          return function __do2() {
            preventDefault(e)();
            var state3 = read(refState)();
            var newState = settings.onMouseDown(networkingState.send)({
              x: clientX(v.value0),
              y: clientY(v.value0)
            })(state3)();
            return write(newState)(refState)();
          };
        }
        ;
        if (v instanceof Nothing) {
          return pure3(unit);
        }
        ;
        throw new Error("Failed pattern match at CS150241Project.GameEngine (line 112, column 13 - line 120, column 29): " + [v.constructor.name]);
      })();
      addEventListener("keydown")(keyDownHandler)(false)(toEventTarget3(doc))();
      addEventListener("keyup")(keyUpHandler)(false)(toEventTarget3(doc))();
      if (maybeCanvas instanceof Just && maybeElemCanvas instanceof Just) {
        addEventListener("mousedown")(mouseDownHandler)(false)(toEventTarget2(maybeElemCanvas.value0))();
        setCanvasDimensions(maybeCanvas.value0)({
          width: settings.width,
          height: settings.height
        })();
        var ctx = getContext2D(maybeCanvas.value0)();
        var engine = {
          initialState: settings.initialState,
          onTick: settings.onTick,
          onMouseDown: settings.onMouseDown,
          onKeyDown: settings.onKeyDown,
          onRender: settings.onRender,
          onMessage: settings.onMessage,
          fps: settings.fps,
          ctx,
          refState,
          width: settings.width,
          height: settings.height,
          ipAddress: settings.ipAddress,
          port: settings.port,
          networkingState,
          refImages
        };
        return gameLoop(engine)();
      }
      ;
      return log2("Canvas not found.")();
    };
  };

  // output/CS150241Project.Graphics/index.js
  var show3 = /* @__PURE__ */ show(showInt);
  var startCircle = function(ctx) {
    return function(v) {
      return function __do() {
        beginPath(ctx)();
        return arc(ctx)({
          start: 0,
          end: 2 * pi,
          radius: v.radius,
          useCounterClockwise: false,
          x: v.x,
          y: v.y
        })();
      };
    };
  };
  var fillWith = function(ctx) {
    return function(color) {
      return function __do() {
        setFillStyle(ctx)(color)();
        return fill(ctx)();
      };
    };
  };
  var drawText = function(ctx) {
    return function(v) {
      var style = show3(v.size) + ("px " + v.font);
      return function __do() {
        setFont(ctx)(style)();
        setFillStyle(ctx)(v.color)();
        var metrics = measureText(ctx)(v.text)();
        return fillText(ctx)(v.text)(v.x - metrics.width / 2)(v.y)();
      };
    };
  };
  var drawRect = function(ctx) {
    return function(v) {
      return function __do() {
        beginPath(ctx)();
        rect(ctx)({
          x: v.x,
          y: v.y,
          width: v.width,
          height: v.height
        })();
        return fillWith(ctx)(v.color)();
      };
    };
  };
  var drawImageScaled = function(ctx) {
    return function(img) {
      return function(v) {
        return drawImageScale(ctx)(img)(v.x)(v.y)(v.width)(v.height);
      };
    };
  };
  var drawCircle = function(ctx) {
    return function(v) {
      return function __do() {
        startCircle(ctx)({
          x: v.x,
          y: v.y,
          radius: v.radius
        })();
        return fillWith(ctx)(v.color)();
      };
    };
  };
  var clearCanvas = function(ctx) {
    return function(v) {
      return function __do() {
        setFillStyle(ctx)(v.color)();
        rect(ctx)({
          x: 0,
          y: 0,
          width: v.width,
          height: v.height
        })();
        return fill(ctx)();
      };
    };
  };

  // output/Config/index.js
  var width8 = 700;
  var rows4 = 8;
  var images2 = ["../../img/eevee.png", "../../img/eevee-shiny.png", "../../img/pikachu.png", "../../img/pikachu-shiny.png", "../../img/turtwig.png", "../../img/turtwig-shiny.png", "../../img/latios.png", "../../img/latios-shiny.png", "../../img/latias.png", "../../img/latias-shiny.png"];
  var height8 = 700;
  var fps = 60;
  var columns = 8;
  var cell_width = /* @__PURE__ */ function() {
    return (width8 - (1 + toNumber(columns + 2 | 0))) / toNumber(columns + 2 | 0);
  }();
  var cell_height = /* @__PURE__ */ function() {
    return (height8 - (1 + toNumber(rows4 + 2 | 0))) / toNumber(rows4 + 2 | 0);
  }();
  var canvas_offset_y = 8;
  var canvas_offset_x = 8;
  var board_start_y = cell_height;
  var board_start_x = cell_width;

  // output/Data.String.CodePoints/foreign.js
  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator = typeof Symbol !== "undefined" && Symbol != null && typeof Symbol.iterator !== "undefined" && typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";
  var _singleton = function(fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };
  var _take = function(fallback) {
    return function(n) {
      if (hasStringIterator) {
        return function(str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  // output/Data.String.CodePoints/index.js
  var fromEnum2 = /* @__PURE__ */ fromEnum(boundedEnumChar);
  var div3 = /* @__PURE__ */ div(euclideanRingInt);
  var mod2 = /* @__PURE__ */ mod(euclideanRingInt);
  var unsurrogate = function(lead) {
    return function(trail) {
      return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
    };
  };
  var isTrail = function(cu) {
    return 56320 <= cu && cu <= 57343;
  };
  var isLead = function(cu) {
    return 55296 <= cu && cu <= 56319;
  };
  var uncons2 = function(s) {
    var v = length3(s);
    if (v === 0) {
      return Nothing.value;
    }
    ;
    if (v === 1) {
      return new Just({
        head: fromEnum2(charAt(0)(s)),
        tail: ""
      });
    }
    ;
    var cu1 = fromEnum2(charAt(1)(s));
    var cu0 = fromEnum2(charAt(0)(s));
    var $43 = isLead(cu0) && isTrail(cu1);
    if ($43) {
      return new Just({
        head: unsurrogate(cu0)(cu1),
        tail: drop3(2)(s)
      });
    }
    ;
    return new Just({
      head: cu0,
      tail: drop3(1)(s)
    });
  };
  var fromCharCode2 = /* @__PURE__ */ function() {
    var $75 = toEnumWithDefaults(boundedEnumChar)(bottom(boundedChar))(top(boundedChar));
    return function($76) {
      return singleton4($75($76));
    };
  }();
  var singletonFallback = function(v) {
    if (v <= 65535) {
      return fromCharCode2(v);
    }
    ;
    var lead = div3(v - 65536 | 0)(1024) + 55296 | 0;
    var trail = mod2(v - 65536 | 0)(1024) + 56320 | 0;
    return fromCharCode2(lead) + fromCharCode2(trail);
  };
  var singleton6 = /* @__PURE__ */ _singleton(singletonFallback);
  var takeFallback = function(v) {
    return function(v1) {
      if (v < 1) {
        return "";
      }
      ;
      var v2 = uncons2(v1);
      if (v2 instanceof Just) {
        return singleton6(v2.value0.head) + takeFallback(v - 1 | 0)(v2.value0.tail);
      }
      ;
      return v1;
    };
  };
  var take5 = /* @__PURE__ */ _take(takeFallback);
  var drop4 = function(n) {
    return function(s) {
      return drop3(length3(take5(n)(s)))(s);
    };
  };

  // output/ProjectTypes/index.js
  var Player12 = /* @__PURE__ */ function() {
    function Player13() {
    }
    ;
    Player13.value = new Player13();
    return Player13;
  }();
  var Player22 = /* @__PURE__ */ function() {
    function Player23() {
    }
    ;
    Player23.value = new Player23();
    return Player23;
  }();
  var Draw = /* @__PURE__ */ function() {
    function Draw2() {
    }
    ;
    Draw2.value = new Draw2();
    return Draw2;
  }();
  var One = /* @__PURE__ */ function() {
    function One2() {
    }
    ;
    One2.value = new One2();
    return One2;
  }();
  var Two = /* @__PURE__ */ function() {
    function Two2() {
    }
    ;
    Two2.value = new Two2();
    return Two2;
  }();
  var Pawn = /* @__PURE__ */ function() {
    function Pawn2() {
    }
    ;
    Pawn2.value = new Pawn2();
    return Pawn2;
  }();
  var Bishop = /* @__PURE__ */ function() {
    function Bishop2() {
    }
    ;
    Bishop2.value = new Bishop2();
    return Bishop2;
  }();
  var Rook = /* @__PURE__ */ function() {
    function Rook2() {
    }
    ;
    Rook2.value = new Rook2();
    return Rook2;
  }();
  var Prince = /* @__PURE__ */ function() {
    function Prince2() {
    }
    ;
    Prince2.value = new Prince2();
    return Prince2;
  }();
  var Princess = /* @__PURE__ */ function() {
    function Princess2() {
    }
    ;
    Princess2.value = new Princess2();
    return Princess2;
  }();
  var showWinner = {
    show: function(v) {
      if (v instanceof Player12) {
        return "Player 1";
      }
      ;
      if (v instanceof Player22) {
        return "Player 2";
      }
      ;
      if (v instanceof Draw) {
        return "Draw";
      }
      ;
      throw new Error("Failed pattern match at ProjectTypes (line 101, column 1 - line 104, column 21): " + [v.constructor.name]);
    }
  };
  var showPlayerNum = {
    show: function(v) {
      if (v instanceof One) {
        return "One";
      }
      ;
      if (v instanceof Two) {
        return "Two";
      }
      ;
      throw new Error("Failed pattern match at ProjectTypes (line 74, column 1 - line 76, column 19): " + [v.constructor.name]);
    }
  };
  var imagesKind = {
    getCurrentPlayerImage: function(v) {
      if (v instanceof Pawn) {
        return "../../img/eevee.png";
      }
      ;
      if (v instanceof Bishop) {
        return "../../img/pikachu.png";
      }
      ;
      if (v instanceof Rook) {
        return "../../img/turtwig.png";
      }
      ;
      if (v instanceof Prince) {
        return "../../img/latios.png";
      }
      ;
      if (v instanceof Princess) {
        return "../../img/latias.png";
      }
      ;
      throw new Error("Failed pattern match at ProjectTypes (line 46, column 1 - line 57, column 64): " + [v.constructor.name]);
    },
    getIdlePlayerImage: function(v) {
      if (v instanceof Pawn) {
        return "../../img/eevee-shiny.png";
      }
      ;
      if (v instanceof Bishop) {
        return "../../img/pikachu-shiny.png";
      }
      ;
      if (v instanceof Rook) {
        return "../../img/turtwig-shiny.png";
      }
      ;
      if (v instanceof Prince) {
        return "../../img/latios-shiny.png";
      }
      ;
      if (v instanceof Princess) {
        return "../../img/latias-shiny.png";
      }
      ;
      throw new Error("Failed pattern match at ProjectTypes (line 46, column 1 - line 57, column 64): " + [v.constructor.name]);
    }
  };
  var eqPlayerNum = {
    eq: function(x) {
      return function(y) {
        if (x instanceof One && y instanceof One) {
          return true;
        }
        ;
        if (x instanceof Two && y instanceof Two) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var eqKind = {
    eq: function(x) {
      return function(y) {
        if (x instanceof Pawn && y instanceof Pawn) {
          return true;
        }
        ;
        if (x instanceof Bishop && y instanceof Bishop) {
          return true;
        }
        ;
        if (x instanceof Rook && y instanceof Rook) {
          return true;
        }
        ;
        if (x instanceof Prince && y instanceof Prince) {
          return true;
        }
        ;
        if (x instanceof Princess && y instanceof Princess) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var getIdlePlayerImage = function(dict) {
    return dict.getIdlePlayerImage;
  };
  var getCurrentPlayerImage = function(dict) {
    return dict.getCurrentPlayerImage;
  };

  // output/Movements/index.js
  var bind4 = /* @__PURE__ */ bind(bindMaybe);
  var notEq2 = /* @__PURE__ */ notEq(eqPlayerNum);
  var eq3 = /* @__PURE__ */ eq(eqPlayerNum);
  var notElem2 = /* @__PURE__ */ notElem(foldableList)(/* @__PURE__ */ eqRec()(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(eqRowNil)()({
    reflectSymbol: function() {
      return "row";
    }
  })(eqInt))()({
    reflectSymbol: function() {
      return "col";
    }
  })(eqInt)));
  var getPossibleMoves = function(dict) {
    return dict.getPossibleMoves;
  };
  var accessCell = function(col) {
    return function(row) {
      return function(board) {
        var cell = bind4(flip(index)(row)(board))(flip(index)(col));
        if (cell instanceof Nothing) {
          return Nothing.value;
        }
        ;
        if (cell instanceof Just) {
          return cell.value0;
        }
        ;
        throw new Error("Failed pattern match at Movements (line 76, column 28 - line 78, column 36): " + [cell.constructor.name]);
      };
    };
  };
  var moveSearcher = function(v) {
    return function(v1) {
      return function(v2) {
        return function(v3) {
          return function(v4) {
            return function(v5) {
              return function(v6) {
                if (v.row < 0 || (v.col < 0 || (v.row >= rows4 || (v.col >= columns || v5 <= 0)))) {
                  return Nil.value;
                }
                ;
                var v7 = accessCell(v.col)(v.row)(v1);
                if (v7 instanceof Nothing) {
                  return new Cons({
                    col: v.col,
                    row: v.row
                  }, moveSearcher({
                    col: v.col + v3 | 0,
                    row: v.row + v4 | 0
                  })(v1)(v2)(v3)(v4)(v5 - 1 | 0)(v6));
                }
                ;
                if (v7 instanceof Just) {
                  if (v6) {
                    return Nil.value;
                  }
                  ;
                  if (!v6) {
                    var v8 = notEq2(v7.value0.player)(v2);
                    if (v8) {
                      if (v7.value0.isProtected) {
                        return Nil.value;
                      }
                      ;
                      return new Cons({
                        col: v.col,
                        row: v.row
                      }, Nil.value);
                    }
                    ;
                    if (!v8) {
                      return Nil.value;
                    }
                    ;
                    throw new Error("Failed pattern match at Movements (line 101, column 16 - line 104, column 21): " + [v8.constructor.name]);
                  }
                  ;
                  throw new Error("Failed pattern match at Movements (line 98, column 19 - line 104, column 21): " + [v6.constructor.name]);
                }
                ;
                throw new Error("Failed pattern match at Movements (line 95, column 3 - line 104, column 21): " + [v7.constructor.name]);
              };
            };
          };
        };
      };
    };
  };
  var removeMovesWithConflict = function($copy_col) {
    return function($copy_row) {
      return function($copy_board) {
        return function($copy_player) {
          return function($copy_current_moves) {
            var $tco_var_col = $copy_col;
            var $tco_var_row = $copy_row;
            var $tco_var_board = $copy_board;
            var $tco_var_player = $copy_player;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(col, row, board, player, current_moves) {
              if (row >= rows4) {
                $tco_done = true;
                return current_moves;
              }
              ;
              if (col >= columns) {
                $tco_var_col = 0;
                $tco_var_row = row + 1 | 0;
                $tco_var_board = board;
                $tco_var_player = player;
                $copy_current_moves = current_moves;
                return;
              }
              ;
              if (otherwise) {
                var v = accessCell(col)(row)(board);
                if (v instanceof Nothing) {
                  $tco_var_col = col + 1 | 0;
                  $tco_var_row = row;
                  $tco_var_board = board;
                  $tco_var_player = player;
                  $copy_current_moves = current_moves;
                  return;
                }
                ;
                if (v instanceof Just) {
                  var checker = flip(notElem2)(getPossibleMoves(movementKind)(v.value0.kind)(board)(v.value0.position)(v.value0.player)(v.value0.isProtected)(v.value0.position.col === (-1 | 0) && v.value0.position.row === (-1 | 0)));
                  var updated_moves = filter(checker)(current_moves);
                  var $72 = eq3(v.value0.player)(player);
                  if ($72) {
                    $tco_var_col = col + 1 | 0;
                    $tco_var_row = row;
                    $tco_var_board = board;
                    $tco_var_player = player;
                    $copy_current_moves = current_moves;
                    return;
                  }
                  ;
                  $tco_var_col = col + 1 | 0;
                  $tco_var_row = row;
                  $tco_var_board = board;
                  $tco_var_player = player;
                  $copy_current_moves = updated_moves;
                  return;
                }
                ;
                throw new Error("Failed pattern match at Movements (line 123, column 17 - line 130, column 55): " + [v.constructor.name]);
              }
              ;
              throw new Error("Failed pattern match at Movements (line 119, column 1 - line 119, column 94): " + [col.constructor.name, row.constructor.name, board.constructor.name, player.constructor.name, current_moves.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_col, $tco_var_row, $tco_var_board, $tco_var_player, $copy_current_moves);
            }
            ;
            return $tco_result;
          };
        };
      };
    };
  };
  var protectedPieceMovementCells = function(c) {
    return function(r) {
      return function(board) {
        return function(player) {
          if (r >= rows4) {
            return Nil.value;
          }
          ;
          if (c >= columns) {
            return protectedPieceMovementCells(0)(r + 1 | 0)(board)(player);
          }
          ;
          if (otherwise) {
            var v = accessCell(c)(r)(board);
            if (v instanceof Nothing) {
              return protectedPieceMovementCells(c + 1 | 0)(r)(board)(player);
            }
            ;
            if (v instanceof Just) {
              var base_moves = getPossibleMoves(movementKind)(v.value0.kind)(board)(v.value0.position)(v.value0.player)(v.value0.isProtected)(false);
              var $79 = v.value0.isProtected && eq3(v.value0.player)(player);
              if ($79) {
                return concat2(new Cons(removeMovesWithConflict(0)(0)(board)(player)(base_moves), new Cons(protectedPieceMovementCells(c + 1 | 0)(r)(board)(player), Nil.value)));
              }
              ;
              return protectedPieceMovementCells(c + 1 | 0)(r)(board)(player);
            }
            ;
            throw new Error("Failed pattern match at Movements (line 136, column 23 - line 144, column 115): " + [v.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Movements (line 132, column 1 - line 132, column 81): " + [c.constructor.name, r.constructor.name, board.constructor.name, player.constructor.name]);
        };
      };
    };
  };
  var movementKind = {
    getPossibleMoves: function(v) {
      return function(v1) {
        return function(v2) {
          return function(v3) {
            return function(v4) {
              return function(v5) {
                if (v5) {
                  return getFreeCells(v1)(0)(0);
                }
                ;
                if (v instanceof Pawn) {
                  if (eq3(v3)(One.value)) {
                    return moveSearcher({
                      col: v2.col,
                      row: v2.row - 1 | 0
                    })(v1)(v3)(0)(-1 | 0)(1)(v4);
                  }
                  ;
                  if (otherwise) {
                    return moveSearcher({
                      col: v2.col,
                      row: v2.row + 1 | 0
                    })(v1)(v3)(0)(1)(1)(v4);
                  }
                  ;
                }
                ;
                if (v instanceof Bishop) {
                  return concat2(new Cons(moveSearcher({
                    col: v2.col - 1 | 0,
                    row: v2.row - 1 | 0
                  })(v1)(v3)(-1 | 0)(-1 | 0)(rows4)(v4), new Cons(moveSearcher({
                    col: v2.col - 1 | 0,
                    row: v2.row + 1 | 0
                  })(v1)(v3)(-1 | 0)(1)(rows4)(v4), new Cons(moveSearcher({
                    col: v2.col + 1 | 0,
                    row: v2.row - 1 | 0
                  })(v1)(v3)(1)(-1 | 0)(rows4)(v4), new Cons(moveSearcher({
                    col: v2.col + 1 | 0,
                    row: v2.row + 1 | 0
                  })(v1)(v3)(1)(1)(rows4)(v4), Nil.value)))));
                }
                ;
                if (v instanceof Rook) {
                  return concat2(new Cons(moveSearcher({
                    col: v2.col,
                    row: v2.row - 1 | 0
                  })(v1)(v3)(0)(-1 | 0)(rows4)(v4), new Cons(moveSearcher({
                    col: v2.col,
                    row: v2.row + 1 | 0
                  })(v1)(v3)(0)(1)(rows4)(v4), new Cons(moveSearcher({
                    col: v2.col - 1 | 0,
                    row: v2.row
                  })(v1)(v3)(-1 | 0)(0)(rows4)(v4), new Cons(moveSearcher({
                    col: v2.col + 1 | 0,
                    row: v2.row
                  })(v1)(v3)(1)(0)(rows4)(v4), Nil.value)))));
                }
                ;
                if (v instanceof Prince) {
                  return concat2(new Cons(moveSearcher({
                    col: v2.col,
                    row: v2.row - 1 | 0
                  })(v1)(v3)(0)(-1 | 0)(1)(v4), new Cons(moveSearcher({
                    col: v2.col,
                    row: v2.row + 1 | 0
                  })(v1)(v3)(0)(1)(1)(v4), new Cons(moveSearcher({
                    col: v2.col - 1 | 0,
                    row: v2.row
                  })(v1)(v3)(-1 | 0)(0)(1)(v4), new Cons(moveSearcher({
                    col: v2.col + 1 | 0,
                    row: v2.row
                  })(v1)(v3)(1)(0)(1)(v4), Nil.value)))));
                }
                ;
                if (v instanceof Princess) {
                  return concat2(new Cons(moveSearcher({
                    col: v2.col - 1 | 0,
                    row: v2.row - 1 | 0
                  })(v1)(v3)(-1 | 0)(-1 | 0)(1)(v4), new Cons(moveSearcher({
                    col: v2.col - 1 | 0,
                    row: v2.row + 1 | 0
                  })(v1)(v3)(-1 | 0)(1)(1)(v4), new Cons(moveSearcher({
                    col: v2.col + 1 | 0,
                    row: v2.row - 1 | 0
                  })(v1)(v3)(1)(-1 | 0)(1)(v4), new Cons(moveSearcher({
                    col: v2.col + 1 | 0,
                    row: v2.row + 1 | 0
                  })(v1)(v3)(1)(1)(1)(v4), Nil.value)))));
                }
                ;
                throw new Error("Failed pattern match at Movements (line 35, column 1 - line 68, column 18): " + [v.constructor.name, v1.constructor.name, v2.constructor.name, v3.constructor.name, v4.constructor.name, v5.constructor.name]);
              };
            };
          };
        };
      };
    }
  };
  var getFreeCells = function(board) {
    return function(col) {
      return function(row) {
        if (row >= rows4) {
          return Nil.value;
        }
        ;
        if (col >= columns) {
          return getFreeCells(board)(0)(row + 1 | 0);
        }
        ;
        if (otherwise) {
          var invalidCells = concat2(new Cons(protectedPieceMovementCells(0)(0)(board)(One.value), new Cons(protectedPieceMovementCells(0)(0)(board)(Two.value), Nil.value)));
          var v = accessCell(col)(row)(board);
          if (v instanceof Nothing) {
            var $91 = notElem2({
              col,
              row
            })(invalidCells);
            if ($91) {
              return new Cons({
                col,
                row
              }, getFreeCells(board)(col + 1 | 0)(row));
            }
            ;
            return getFreeCells(board)(col + 1 | 0)(row);
          }
          ;
          if (v instanceof Just) {
            return getFreeCells(board)(col + 1 | 0)(row);
          }
          ;
          throw new Error("Failed pattern match at Movements (line 110, column 17 - line 114, column 46): " + [v.constructor.name]);
        }
        ;
        throw new Error("Failed pattern match at Movements (line 106, column 1 - line 106, column 53): " + [board.constructor.name, col.constructor.name, row.constructor.name]);
      };
    };
  };

  // output/Main/index.js
  var pure4 = /* @__PURE__ */ pure(applicativeEffect);
  var eq4 = /* @__PURE__ */ eq(eqPlayerNum);
  var getCurrentPlayerImage2 = /* @__PURE__ */ getCurrentPlayerImage(imagesKind);
  var getIdlePlayerImage2 = /* @__PURE__ */ getIdlePlayerImage(imagesKind);
  var lookup2 = /* @__PURE__ */ lookup(ordString);
  var show4 = /* @__PURE__ */ show(showInt);
  var show1 = /* @__PURE__ */ show(showWinner);
  var show22 = /* @__PURE__ */ show(/* @__PURE__ */ showRecord()()(/* @__PURE__ */ showRecordFieldsCons({
    reflectSymbol: function() {
      return "payload";
    }
  })(/* @__PURE__ */ showRecordFieldsConsNil({
    reflectSymbol: function() {
      return "playerId";
    }
  })(showPlayerId))(showString)));
  var show32 = /* @__PURE__ */ show(showPlayerId);
  var append13 = /* @__PURE__ */ append(semigroupArray);
  var eqRec2 = /* @__PURE__ */ eqRec();
  var eqRowCons2 = /* @__PURE__ */ eqRowCons(eqRowNil)();
  var eqRec1 = /* @__PURE__ */ eqRec2(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons2({
    reflectSymbol: function() {
      return "row";
    }
  })(eqInt))()({
    reflectSymbol: function() {
      return "col";
    }
  })(eqInt));
  var elem2 = /* @__PURE__ */ elem(foldableList)(eqRec1);
  var eq42 = /* @__PURE__ */ eq(eqKind);
  var bind5 = /* @__PURE__ */ bind(bindMaybe);
  var getPossibleMoves2 = /* @__PURE__ */ getPossibleMoves(movementKind);
  var eq5 = /* @__PURE__ */ eq(/* @__PURE__ */ eqMaybe(/* @__PURE__ */ eqRec2(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons2({
    reflectSymbol: function() {
      return "position";
    }
  })(eqRec1))()({
    reflectSymbol: function() {
      return "player";
    }
  })(eqPlayerNum))()({
    reflectSymbol: function() {
      return "kind";
    }
  })(eqKind))()({
    reflectSymbol: function() {
      return "isProtected";
    }
  })(eqBoolean))));
  var map6 = /* @__PURE__ */ map(functorArray);
  var notEq1 = /* @__PURE__ */ notEq(eqPlayerNum);
  var foldl3 = /* @__PURE__ */ foldl(foldableList);
  var show42 = /* @__PURE__ */ show(showPlayerNum);
  var notEq22 = /* @__PURE__ */ notEq(/* @__PURE__ */ eqArray(eqString));
  var onRender = function(images3) {
    return function(ctx) {
      return function(gameState) {
        return function __do() {
          clearCanvas(ctx)({
            color: "black",
            width: width8,
            height: height8
          })();
          var messageY = width8 / 2;
          var messageX = width8 / 2;
          var drawMoves = function(v) {
            if (v instanceof Nil) {
              return pure4(unit);
            }
            ;
            if (v instanceof Cons) {
              return function __do2() {
                drawCircle(ctx)({
                  x: board_start_x + (cell_width + 1) * toNumber(v.value0.col) + cell_width / 2,
                  y: board_start_y + (cell_height + 1) * toNumber(v.value0.row) + cell_width / 2,
                  radius: cell_width / 4,
                  color: "cornflowerblue"
                })();
                return drawMoves(v.value1)();
              };
            }
            ;
            throw new Error("Failed pattern match at Main (line 587, column 5 - line 587, column 47): " + [v.constructor.name]);
          };
          var drawBoard = function(col) {
            return function(row) {
              if (row >= rows4) {
                return pure4(unit);
              }
              ;
              if (col >= columns) {
                return drawBoard(0)(row + 1 | 0);
              }
              ;
              if (otherwise) {
                var temp_y = (cell_height + 1) * toNumber(row + 1 | 0);
                var temp_x = (cell_width + 1) * toNumber(col + 1 | 0);
                return function __do2() {
                  drawRect(ctx)({
                    x: temp_x,
                    y: temp_y,
                    color: "white",
                    width: cell_width,
                    height: cell_height
                  })();
                  var v = accessCell(col)(row)(gameState.board);
                  if (v instanceof Nothing) {
                    return drawBoard(col + 1 | 0)(row)();
                  }
                  ;
                  if (v instanceof Just) {
                    var image = function() {
                      var $169 = eq4(gameState.currentPlayer)(v.value0.player);
                      if ($169) {
                        return getCurrentPlayerImage2(v.value0.kind);
                      }
                      ;
                      return getIdlePlayerImage2(v.value0.kind);
                    }();
                    var v1 = lookup2(image)(images3);
                    if (v1 instanceof Nothing) {
                      return drawBoard(col + 1 | 0)(row)();
                    }
                    ;
                    if (v1 instanceof Just) {
                      drawImageScaled(ctx)(v1.value0)({
                        x: temp_x,
                        y: temp_y,
                        width: cell_width,
                        height: cell_height
                      })();
                      return drawBoard(col + 1 | 0)(row)();
                    }
                    ;
                    throw new Error("Failed pattern match at Main (line 580, column 15 - line 584, column 40): " + [v1.constructor.name]);
                  }
                  ;
                  throw new Error("Failed pattern match at Main (line 572, column 11 - line 584, column 40): " + [v.constructor.name]);
                };
              }
              ;
              throw new Error("Failed pattern match at Main (line 560, column 5 - line 560, column 43): " + [col.constructor.name, row.constructor.name]);
            };
          };
          var drawCaptured = function(playerOneCaptures) {
            return function(playerTwoCaptures) {
              var player_one_y_offset = (cell_height + 1) * (1 + toNumber(rows4));
              var is_playertwo_current = function() {
                var $173 = eq4(gameState.currentPlayer)(Two.value);
                if ($173) {
                  return true;
                }
                ;
                return false;
              }();
              var is_playerone_current = function() {
                var $174 = eq4(gameState.currentPlayer)(One.value);
                if ($174) {
                  return true;
                }
                ;
                return false;
              }();
              var drawKinds = function(v) {
                return function(v1) {
                  return function(v2) {
                    return function(v3) {
                      if (v instanceof Nil) {
                        return pure4(unit);
                      }
                      ;
                      if (v instanceof Cons) {
                        var image = function() {
                          var $179 = v3 === true;
                          if ($179) {
                            return getCurrentPlayerImage2(v.value0.kind);
                          }
                          ;
                          return getIdlePlayerImage2(v.value0.kind);
                        }();
                        return function __do2() {
                          (function() {
                            var v4 = lookup2(image)(images3);
                            if (v4 instanceof Nothing) {
                              return unit;
                            }
                            ;
                            if (v4 instanceof Just) {
                              return drawImageScaled(ctx)(v4.value0)({
                                x: (cell_width + 1) * v2,
                                y: v1,
                                width: cell_width,
                                height: cell_height
                              })();
                            }
                            ;
                            throw new Error("Failed pattern match at Main (line 619, column 11 - line 621, column 133): " + [v4.constructor.name]);
                          })();
                          drawRect(ctx)({
                            x: (cell_width + 1) * v2 + cell_width / 2 - cell_width / 8,
                            y: v1 + cell_height / 1.25,
                            color: "white",
                            width: cell_width / 4,
                            height: cell_height / 4
                          })();
                          drawText(ctx)({
                            x: (cell_width + 1) * v2 + cell_width / 2,
                            y: v1 + cell_height / 1.25 + 15,
                            color: "black",
                            font: "arial",
                            size: 18,
                            text: show4(v.value0.count)
                          })();
                          return drawKinds(v.value1)(v1)(v2 + 1)(v3)();
                        };
                      }
                      ;
                      throw new Error("Failed pattern match at Main (line 610, column 9 - line 610, column 81): " + [v.constructor.name, v1.constructor.name, v2.constructor.name, v3.constructor.name]);
                    };
                  };
                };
              };
              return function __do2() {
                drawKinds(playerOneCaptures)(player_one_y_offset)(0)(is_playerone_current)();
                drawKinds(playerTwoCaptures)(0)(0)(is_playertwo_current)();
                return unit;
              };
            };
          };
          drawBoard(0)(0)();
          drawMoves(gameState.possibleMoves)();
          drawCaptured(gameState.playerOneCaptures)(gameState.playerTwoCaptures)();
          if (gameState.winner instanceof Nothing) {
            return unit;
          }
          ;
          if (gameState.winner instanceof Just) {
            return drawText(ctx)({
              x: messageX,
              y: messageY,
              color: "black",
              font: "arial",
              size: 18,
              text: "Game Verdict: " + show1(gameState.winner.value0)
            })();
          }
          ;
          throw new Error("Failed pattern match at Main (line 635, column 3 - line 637, column 138): " + [gameState.winner.constructor.name]);
        };
      };
    };
  };
  var onMouseDown = function(send) {
    return function(v) {
      return function(gameState) {
        var cell_row = floor2((toNumber(v.y) - canvas_offset_y - cell_height) / cell_height);
        var cell_col = floor2((toNumber(v.x) - canvas_offset_x - cell_width) / cell_width);
        var $189 = gameState.gameStart === true && eq4(gameState.currentPlayer)(gameState.myPlayerNum);
        if ($189) {
          return function __do() {
            send("click " + (show4(cell_col) + (" " + show4(cell_row))))();
            return gameState;
          };
        }
        ;
        return pure4(gameState);
      };
    };
  };
  var onMessage2 = function(v) {
    return function(message2) {
      return function(gameState) {
        var command = split(" ")(message2.payload);
        var clicked_cell = function() {
          var v1 = index(command)(0);
          if (v1 instanceof Nothing) {
            return {
              col: -2 | 0,
              row: -2 | 0
            };
          }
          ;
          if (v1 instanceof Just) {
            var $193 = v1.value0 === "click";
            if ($193) {
              var cell_row = function() {
                var v2 = index(command)(2);
                if (v2 instanceof Nothing) {
                  return -2 | 0;
                }
                ;
                if (v2 instanceof Just) {
                  var v3 = fromString(v2.value0);
                  if (v3 instanceof Nothing) {
                    return -2 | 0;
                  }
                  ;
                  if (v3 instanceof Just) {
                    return v3.value0;
                  }
                  ;
                  throw new Error("Failed pattern match at Main (line 524, column 27 - line 526, column 32): " + [v3.constructor.name]);
                }
                ;
                throw new Error("Failed pattern match at Main (line 522, column 24 - line 526, column 32): " + [v2.constructor.name]);
              }();
              var cell_col = function() {
                var v2 = index(command)(1);
                if (v2 instanceof Nothing) {
                  return -2 | 0;
                }
                ;
                if (v2 instanceof Just) {
                  var v3 = fromString(v2.value0);
                  if (v3 instanceof Nothing) {
                    return -2 | 0;
                  }
                  ;
                  if (v3 instanceof Just) {
                    return v3.value0;
                  }
                  ;
                  throw new Error("Failed pattern match at Main (line 519, column 27 - line 521, column 32): " + [v3.constructor.name]);
                }
                ;
                throw new Error("Failed pattern match at Main (line 517, column 24 - line 521, column 32): " + [v2.constructor.name]);
              }();
              return {
                col: cell_col,
                row: cell_row
              };
            }
            ;
            return {
              col: -2 | 0,
              row: -2 | 0
            };
          }
          ;
          throw new Error("Failed pattern match at Main (line 512, column 20 - line 528, column 34): " + [v1.constructor.name]);
        }();
        return function __do() {
          log2("Received Message: " + show22(message2))();
          if (!gameState.gameStart) {
            var $204 = show32(message2.playerId) === "Player1";
            if ($204) {
              return {
                activePiece: gameState.activePiece,
                board: gameState.board,
                clickedCell: gameState.clickedCell,
                columns: gameState.columns,
                currentPlayer: gameState.currentPlayer,
                gameStart: gameState.gameStart,
                initialized: gameState.initialized,
                moveCount: gameState.moveCount,
                myPlayerNum: gameState.myPlayerNum,
                playerOneCaptures: gameState.playerOneCaptures,
                playerTwoCaptures: gameState.playerTwoCaptures,
                possibleMoves: gameState.possibleMoves,
                rows: gameState.rows,
                tickCount: gameState.tickCount,
                winner: gameState.winner,
                lastReceivedMessage: new Just(message2)
              };
            }
            ;
            var $205 = show32(message2.playerId) === "Player2" && isNothing(gameState.lastReceivedMessage) !== true;
            if ($205) {
              return {
                activePiece: gameState.activePiece,
                board: gameState.board,
                clickedCell: gameState.clickedCell,
                columns: gameState.columns,
                currentPlayer: gameState.currentPlayer,
                gameStart: gameState.gameStart,
                initialized: gameState.initialized,
                moveCount: gameState.moveCount,
                myPlayerNum: gameState.myPlayerNum,
                playerOneCaptures: gameState.playerOneCaptures,
                playerTwoCaptures: gameState.playerTwoCaptures,
                possibleMoves: gameState.possibleMoves,
                rows: gameState.rows,
                tickCount: gameState.tickCount,
                winner: gameState.winner,
                lastReceivedMessage: new Just(message2)
              };
            }
            ;
            return gameState;
          }
          ;
          if (gameState.gameStart) {
            var $206 = eq4(gameState.myPlayerNum)(gameState.currentPlayer) && (show32(message2.playerId) === "Player1" && eq4(gameState.currentPlayer)(One.value) || show32(message2.playerId) === "Player2" && eq4(gameState.currentPlayer)(Two.value));
            if ($206) {
              return {
                activePiece: gameState.activePiece,
                board: gameState.board,
                columns: gameState.columns,
                currentPlayer: gameState.currentPlayer,
                gameStart: gameState.gameStart,
                initialized: gameState.initialized,
                moveCount: gameState.moveCount,
                myPlayerNum: gameState.myPlayerNum,
                playerOneCaptures: gameState.playerOneCaptures,
                playerTwoCaptures: gameState.playerTwoCaptures,
                possibleMoves: gameState.possibleMoves,
                rows: gameState.rows,
                tickCount: gameState.tickCount,
                winner: gameState.winner,
                lastReceivedMessage: new Just(message2),
                clickedCell: clicked_cell
              };
            }
            ;
            return {
              activePiece: gameState.activePiece,
              board: gameState.board,
              clickedCell: gameState.clickedCell,
              columns: gameState.columns,
              currentPlayer: gameState.currentPlayer,
              gameStart: gameState.gameStart,
              initialized: gameState.initialized,
              moveCount: gameState.moveCount,
              myPlayerNum: gameState.myPlayerNum,
              playerOneCaptures: gameState.playerOneCaptures,
              playerTwoCaptures: gameState.playerTwoCaptures,
              possibleMoves: gameState.possibleMoves,
              rows: gameState.rows,
              tickCount: gameState.tickCount,
              winner: gameState.winner,
              lastReceivedMessage: new Just(message2)
            };
          }
          ;
          throw new Error("Failed pattern match at Main (line 532, column 3 - line 542, column 64): " + [gameState.gameStart.constructor.name]);
        };
      };
    };
  };
  var onKeyUp = function(v) {
    return function(v1) {
      return function(gameState) {
        return pure4(gameState);
      };
    };
  };
  var onKeyDown = function(v) {
    return function(v1) {
      return function(gameState) {
        return pure4(gameState);
      };
    };
  };
  var getBoardRow = function(row) {
    return function(board) {
      var v = index(board)(row);
      if (v instanceof Nothing) {
        return [];
      }
      ;
      if (v instanceof Just) {
        return v.value0;
      }
      ;
      throw new Error("Failed pattern match at Main (line 133, column 25 - line 135, column 34): " + [v.constructor.name]);
    };
  };
  var createRook = function(v) {
    return function(v1) {
      return function(v2) {
        if (v2 instanceof One) {
          return new Just({
            kind: Rook.value,
            position: {
              col: v,
              row: v1
            },
            player: One.value,
            isProtected: false
          });
        }
        ;
        if (v2 instanceof Two) {
          return new Just({
            kind: Rook.value,
            position: {
              col: v,
              row: v1
            },
            player: Two.value,
            isProtected: false
          });
        }
        ;
        throw new Error("Failed pattern match at Main (line 72, column 1 - line 72, column 53): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
  var createPrincess = function(v) {
    return function(v1) {
      return function(v2) {
        if (v2 instanceof One) {
          return new Just({
            kind: Princess.value,
            position: {
              col: v,
              row: v1
            },
            player: One.value,
            isProtected: true
          });
        }
        ;
        if (v2 instanceof Two) {
          return new Just({
            kind: Princess.value,
            position: {
              col: v,
              row: v1
            },
            player: Two.value,
            isProtected: true
          });
        }
        ;
        throw new Error("Failed pattern match at Main (line 80, column 1 - line 80, column 57): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
  var createPrince = function(v) {
    return function(v1) {
      return function(v2) {
        if (v2 instanceof One) {
          return new Just({
            kind: Prince.value,
            position: {
              col: v,
              row: v1
            },
            player: One.value,
            isProtected: true
          });
        }
        ;
        if (v2 instanceof Two) {
          return new Just({
            kind: Prince.value,
            position: {
              col: v,
              row: v1
            },
            player: Two.value,
            isProtected: true
          });
        }
        ;
        throw new Error("Failed pattern match at Main (line 76, column 1 - line 76, column 55): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
  var createPawn = function(v) {
    return function(v1) {
      return function(v2) {
        if (v2 instanceof One) {
          return new Just({
            kind: Pawn.value,
            position: {
              col: v,
              row: v1
            },
            player: One.value,
            isProtected: false
          });
        }
        ;
        if (v2 instanceof Two) {
          return new Just({
            kind: Pawn.value,
            position: {
              col: v,
              row: v1
            },
            player: Two.value,
            isProtected: false
          });
        }
        ;
        throw new Error("Failed pattern match at Main (line 68, column 1 - line 68, column 53): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
  var createBishop = function(v) {
    return function(v1) {
      return function(v2) {
        if (v2 instanceof One) {
          return new Just({
            kind: Bishop.value,
            position: {
              col: v,
              row: v1
            },
            player: One.value,
            isProtected: false
          });
        }
        ;
        if (v2 instanceof Two) {
          return new Just({
            kind: Bishop.value,
            position: {
              col: v,
              row: v1
            },
            player: Two.value,
            isProtected: false
          });
        }
        ;
        throw new Error("Failed pattern match at Main (line 64, column 1 - line 64, column 55): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
  var initialState = /* @__PURE__ */ function() {
    var nothing_row = replicate(columns)(Nothing.value);
    var getPawnRow = function(row) {
      return function(player_num) {
        return function(col) {
          if (col === columns) {
            return [];
          }
          ;
          if (otherwise) {
            return append13([createPawn(col)(row)(player_num)])(getPawnRow(row)(player_num)(col + 1 | 0));
          }
          ;
          throw new Error("Failed pattern match at Main (line 105, column 5 - line 105, column 65): " + [row.constructor.name, player_num.constructor.name, col.constructor.name]);
        };
      };
    };
    var getBackRow = function(row) {
      return function(player_num) {
        return [createRook(0)(row)(player_num), createBishop(1)(row)(player_num), Nothing.value, createPrince(3)(row)(player_num), createPrincess(4)(row)(player_num), Nothing.value, createBishop(6)(row)(player_num), createRook(7)(row)(player_num)];
      };
    };
    var init_board = append13([getBackRow(0)(Two.value)])(append13([getPawnRow(1)(Two.value)(0)])(append13(replicate(rows4 - 4 | 0)(nothing_row))(append13([getPawnRow(rows4 - 2 | 0)(One.value)(0)])([getBackRow(rows4 - 1 | 0)(One.value)]))));
    return pure4({
      tickCount: 0,
      lastReceivedMessage: Nothing.value,
      board: init_board,
      currentPlayer: One.value,
      clickedCell: {
        col: -1 | 0,
        row: -1 | 0
      },
      possibleMoves: Nil.value,
      activePiece: Nothing.value,
      playerOneCaptures: Nil.value,
      playerTwoCaptures: Nil.value,
      winner: Nothing.value,
      moveCount: 3,
      rows: rows4,
      columns,
      gameStart: false,
      initialized: false,
      myPlayerNum: One.value
    });
  }();
  var onTick = function(send) {
    return function(gameState) {
      var valid_move = elem2(gameState.clickedCell)(gameState.possibleMoves);
      var updateTickCount = function(state3) {
        return {
          lastReceivedMessage: state3.lastReceivedMessage,
          board: state3.board,
          currentPlayer: state3.currentPlayer,
          clickedCell: state3.clickedCell,
          possibleMoves: state3.possibleMoves,
          activePiece: state3.activePiece,
          playerOneCaptures: state3.playerOneCaptures,
          playerTwoCaptures: state3.playerTwoCaptures,
          winner: state3.winner,
          moveCount: state3.moveCount,
          columns: state3.columns,
          rows: state3.rows,
          gameStart: state3.gameStart,
          initialized: state3.initialized,
          myPlayerNum: state3.myPlayerNum,
          tickCount: gameState.tickCount + 1 | 0
        };
      };
      var updateGameOver = function(state3) {
        var $227 = $$null(protectedPieceMovementCells(0)(0)(state3.board)(One.value));
        if ($227) {
          var $228 = $$null(protectedPieceMovementCells(0)(0)(state3.board)(Two.value));
          if ($228) {
            return {
              tickCount: state3.tickCount,
              lastReceivedMessage: state3.lastReceivedMessage,
              board: state3.board,
              currentPlayer: state3.currentPlayer,
              clickedCell: state3.clickedCell,
              possibleMoves: state3.possibleMoves,
              activePiece: state3.activePiece,
              playerOneCaptures: state3.playerOneCaptures,
              playerTwoCaptures: state3.playerTwoCaptures,
              moveCount: state3.moveCount,
              columns: state3.columns,
              rows: state3.rows,
              gameStart: state3.gameStart,
              initialized: state3.initialized,
              myPlayerNum: state3.myPlayerNum,
              winner: new Just(Draw.value)
            };
          }
          ;
          return {
            tickCount: state3.tickCount,
            lastReceivedMessage: state3.lastReceivedMessage,
            board: state3.board,
            currentPlayer: state3.currentPlayer,
            clickedCell: state3.clickedCell,
            possibleMoves: state3.possibleMoves,
            activePiece: state3.activePiece,
            playerOneCaptures: state3.playerOneCaptures,
            playerTwoCaptures: state3.playerTwoCaptures,
            moveCount: state3.moveCount,
            columns: state3.columns,
            rows: state3.rows,
            gameStart: state3.gameStart,
            initialized: state3.initialized,
            myPlayerNum: state3.myPlayerNum,
            winner: new Just(Player22.value)
          };
        }
        ;
        var $229 = $$null(protectedPieceMovementCells(0)(0)(state3.board)(Two.value));
        if ($229) {
          return {
            tickCount: state3.tickCount,
            lastReceivedMessage: state3.lastReceivedMessage,
            board: state3.board,
            currentPlayer: state3.currentPlayer,
            clickedCell: state3.clickedCell,
            possibleMoves: state3.possibleMoves,
            activePiece: state3.activePiece,
            playerOneCaptures: state3.playerOneCaptures,
            playerTwoCaptures: state3.playerTwoCaptures,
            moveCount: state3.moveCount,
            columns: state3.columns,
            rows: state3.rows,
            gameStart: state3.gameStart,
            initialized: state3.initialized,
            myPlayerNum: state3.myPlayerNum,
            winner: new Just(Player12.value)
          };
        }
        ;
        return state3;
      };
      var readCapturedMessage = function(captured_string) {
        var helper = function(remaining_captured) {
          var kind2 = function() {
            var v = take5(1)(remaining_captured);
            if (v === "p") {
              return Pawn.value;
            }
            ;
            if (v === "b") {
              return Bishop.value;
            }
            ;
            if (v === "r") {
              return Rook.value;
            }
            ;
            if (v === "k") {
              return Prince.value;
            }
            ;
            if (v === "q") {
              return Princess.value;
            }
            ;
            return Pawn.value;
          }();
          var count = function() {
            var v = fromString(take5(1)(drop4(1)(remaining_captured)));
            if (v instanceof Just) {
              return v.value0;
            }
            ;
            if (v instanceof Nothing) {
              return 0;
            }
            ;
            throw new Error("Failed pattern match at Main (line 349, column 25 - line 351, column 31): " + [v.constructor.name]);
          }();
          var $233 = count === 0;
          if ($233) {
            return Nil.value;
          }
          ;
          return new Cons({
            kind: kind2,
            count
          }, helper(drop4(2)(remaining_captured)));
        };
        var $234 = captured_string === "None";
        if ($234) {
          return Nil.value;
        }
        ;
        return helper(captured_string);
      };
      var pieceConstructor = function(cp) {
        if (eq42(cp.kind)(Bishop.value)) {
          return createBishop(-1 | 0)(-1 | 0)(gameState.currentPlayer);
        }
        ;
        if (eq42(cp.kind)(Pawn.value)) {
          return createPawn(-1 | 0)(-1 | 0)(gameState.currentPlayer);
        }
        ;
        if (otherwise) {
          return createRook(-1 | 0)(-1 | 0)(gameState.currentPlayer);
        }
        ;
        throw new Error("Failed pattern match at Main (line 142, column 5 - line 142, column 48): " + [cp.constructor.name]);
      };
      var pieceFinder = function(col) {
        return function(row) {
          return function(player) {
            if (row === 8 && eq4(player)(One.value)) {
              return flip(bind5)(pieceConstructor)(index2(gameState.playerOneCaptures)(col + 1 | 0));
            }
            ;
            if (row === (-1 | 0) && eq4(player)(Two.value)) {
              return flip(bind5)(pieceConstructor)(index2(gameState.playerTwoCaptures)(col + 1 | 0));
            }
            ;
            if (otherwise) {
              var v = accessCell(col)(row)(gameState.board);
              if (v instanceof Nothing) {
                return Nothing.value;
              }
              ;
              if (v instanceof Just) {
                var $240 = eq4(v.value0.player)(player);
                if ($240) {
                  return new Just(v.value0);
                }
                ;
                return Nothing.value;
              }
              ;
              throw new Error("Failed pattern match at Main (line 153, column 40 - line 157, column 55): " + [v.constructor.name]);
            }
            ;
            throw new Error("Failed pattern match at Main (line 149, column 5 - line 149, column 58): " + [col.constructor.name, row.constructor.name, player.constructor.name]);
          };
        };
      };
      var updateActivePiece = function(state3) {
        var v = pieceFinder(state3.clickedCell.col)(state3.clickedCell.row)(state3.currentPlayer);
        if (v instanceof Nothing) {
          return {
            tickCount: state3.tickCount,
            lastReceivedMessage: state3.lastReceivedMessage,
            board: state3.board,
            currentPlayer: state3.currentPlayer,
            clickedCell: state3.clickedCell,
            possibleMoves: state3.possibleMoves,
            playerOneCaptures: state3.playerOneCaptures,
            playerTwoCaptures: state3.playerTwoCaptures,
            winner: state3.winner,
            moveCount: state3.moveCount,
            columns: state3.columns,
            rows: state3.rows,
            gameStart: state3.gameStart,
            initialized: state3.initialized,
            myPlayerNum: state3.myPlayerNum,
            activePiece: Nothing.value
          };
        }
        ;
        if (v instanceof Just) {
          var $243 = eq4(v.value0.player)(state3.currentPlayer);
          if ($243) {
            return {
              tickCount: state3.tickCount,
              lastReceivedMessage: state3.lastReceivedMessage,
              board: state3.board,
              currentPlayer: state3.currentPlayer,
              clickedCell: state3.clickedCell,
              possibleMoves: state3.possibleMoves,
              playerOneCaptures: state3.playerOneCaptures,
              playerTwoCaptures: state3.playerTwoCaptures,
              winner: state3.winner,
              moveCount: state3.moveCount,
              columns: state3.columns,
              rows: state3.rows,
              gameStart: state3.gameStart,
              initialized: state3.initialized,
              myPlayerNum: state3.myPlayerNum,
              activePiece: new Just(v.value0)
            };
          }
          ;
          return {
            tickCount: state3.tickCount,
            lastReceivedMessage: state3.lastReceivedMessage,
            board: state3.board,
            currentPlayer: state3.currentPlayer,
            clickedCell: state3.clickedCell,
            possibleMoves: state3.possibleMoves,
            playerOneCaptures: state3.playerOneCaptures,
            playerTwoCaptures: state3.playerTwoCaptures,
            winner: state3.winner,
            moveCount: state3.moveCount,
            columns: state3.columns,
            rows: state3.rows,
            gameStart: state3.gameStart,
            initialized: state3.initialized,
            myPlayerNum: state3.myPlayerNum,
            activePiece: Nothing.value
          };
        }
        ;
        throw new Error("Failed pattern match at Main (line 163, column 31 - line 166, column 83): " + [v.constructor.name]);
      };
      var updatePossibleMoves = function(state3) {
        var v = pieceFinder(state3.clickedCell.col)(state3.clickedCell.row)(state3.currentPlayer);
        if (v instanceof Nothing) {
          return {
            tickCount: state3.tickCount,
            lastReceivedMessage: state3.lastReceivedMessage,
            board: state3.board,
            currentPlayer: state3.currentPlayer,
            clickedCell: state3.clickedCell,
            activePiece: state3.activePiece,
            playerOneCaptures: state3.playerOneCaptures,
            playerTwoCaptures: state3.playerTwoCaptures,
            winner: state3.winner,
            moveCount: state3.moveCount,
            columns: state3.columns,
            rows: state3.rows,
            gameStart: state3.gameStart,
            initialized: state3.initialized,
            myPlayerNum: state3.myPlayerNum,
            possibleMoves: Nil.value
          };
        }
        ;
        if (v instanceof Just) {
          var base_moves = getPossibleMoves2(v.value0.kind)(state3.board)(v.value0.position)(v.value0.player)(v.value0.isProtected)(v.value0.position.col === (-1 | 0) && v.value0.position.row === (-1 | 0));
          var $246 = v.value0.isProtected !== true;
          if ($246) {
            return {
              tickCount: state3.tickCount,
              lastReceivedMessage: state3.lastReceivedMessage,
              board: state3.board,
              currentPlayer: state3.currentPlayer,
              clickedCell: state3.clickedCell,
              activePiece: state3.activePiece,
              playerOneCaptures: state3.playerOneCaptures,
              playerTwoCaptures: state3.playerTwoCaptures,
              winner: state3.winner,
              moveCount: state3.moveCount,
              columns: state3.columns,
              rows: state3.rows,
              gameStart: state3.gameStart,
              initialized: state3.initialized,
              myPlayerNum: state3.myPlayerNum,
              possibleMoves: getPossibleMoves2(v.value0.kind)(state3.board)(v.value0.position)(v.value0.player)(v.value0.isProtected)(v.value0.position.col === (-1 | 0) && v.value0.position.row === (-1 | 0))
            };
          }
          ;
          return {
            tickCount: state3.tickCount,
            lastReceivedMessage: state3.lastReceivedMessage,
            board: state3.board,
            currentPlayer: state3.currentPlayer,
            clickedCell: state3.clickedCell,
            activePiece: state3.activePiece,
            playerOneCaptures: state3.playerOneCaptures,
            playerTwoCaptures: state3.playerTwoCaptures,
            winner: state3.winner,
            moveCount: state3.moveCount,
            columns: state3.columns,
            rows: state3.rows,
            gameStart: state3.gameStart,
            initialized: state3.initialized,
            myPlayerNum: state3.myPlayerNum,
            possibleMoves: removeMovesWithConflict(0)(0)(state3.board)(v.value0.player)(base_moves)
          };
        }
        ;
        throw new Error("Failed pattern match at Main (line 173, column 33 - line 179, column 170): " + [v.constructor.name]);
      };
      var makeMove = function(state3) {
        var removePiece = function(row) {
          var checker2 = function(to_compare) {
            var $248 = eq5(state3.activePiece)(to_compare);
            if ($248) {
              return Nothing.value;
            }
            ;
            return to_compare;
          };
          return map6(checker2)(row);
        };
        var new_piece = function() {
          var $249 = valid_move === true;
          if ($249) {
            if (state3.activePiece instanceof Nothing) {
              return Nothing.value;
            }
            ;
            if (state3.activePiece instanceof Just) {
              return new Just({
                isProtected: state3.activePiece.value0.isProtected,
                kind: state3.activePiece.value0.kind,
                player: state3.activePiece.value0.player,
                position: state3.clickedCell
              });
            }
            ;
            throw new Error("Failed pattern match at Main (line 207, column 16 - line 209, column 72): " + [state3.activePiece.constructor.name]);
          }
          ;
          return state3.activePiece;
        }();
        var decrCount = function(v) {
          return function(v1) {
            if (v instanceof Nil) {
              return Nil.value;
            }
            ;
            if (v instanceof Cons) {
              if (eq42(v.value0.kind)(v1.kind)) {
                var $254 = v.value0.count === 1;
                if ($254) {
                  return v.value1;
                }
                ;
                return new Cons({
                  kind: v.value0.kind,
                  count: v.value0.count - 1 | 0
                }, v.value1);
              }
              ;
              if (otherwise) {
                return new Cons(v.value0, decrCount(v.value1)(v1));
              }
              ;
            }
            ;
            throw new Error("Failed pattern match at Main (line 221, column 9 - line 221, column 61): " + [v.constructor.name, v1.constructor.name]);
          };
        };
        var addPiece = function(row) {
          return function(col_num) {
            var helper = function(current_col) {
              if (current_col === columns) {
                return [];
              }
              ;
              if (current_col === col_num) {
                return append13([new_piece])(helper(current_col + 1 | 0));
              }
              ;
              if (otherwise) {
                var v = index(row)(current_col);
                if (v instanceof Nothing) {
                  return append13([Nothing.value])(helper(current_col + 1 | 0));
                }
                ;
                if (v instanceof Just) {
                  return append13([v.value0])(helper(current_col + 1 | 0));
                }
                ;
                throw new Error("Failed pattern match at Main (line 248, column 29 - line 250, column 66): " + [v.constructor.name]);
              }
              ;
              throw new Error("Failed pattern match at Main (line 244, column 13 - line 244, column 49): " + [current_col.constructor.name]);
            };
            return helper(0);
          };
        };
        var movePiece = function(board) {
          return function(piece_position) {
            return function(target_position) {
              var helper = function(current_row) {
                if (current_row === rows4) {
                  return [];
                }
                ;
                if (current_row === target_position.row && current_row === piece_position.row) {
                  return append13([removePiece(addPiece(getBoardRow(current_row)(board))(target_position.col))])(helper(current_row + 1 | 0));
                }
                ;
                if (current_row === target_position.row) {
                  return append13([addPiece(getBoardRow(current_row)(board))(target_position.col)])(helper(current_row + 1 | 0));
                }
                ;
                if (current_row === piece_position.row) {
                  return append13([removePiece(getBoardRow(current_row)(board))])(helper(current_row + 1 | 0));
                }
                ;
                if (otherwise) {
                  return append13([getBoardRow(current_row)(board)])(helper(current_row + 1 | 0));
                }
                ;
                throw new Error("Failed pattern match at Main (line 257, column 13 - line 257, column 35): " + [current_row.constructor.name]);
              };
              return helper(0);
            };
          };
        };
        var addCaptured = function(v) {
          return function(v1) {
            if (v instanceof Nil) {
              return new Cons({
                kind: v1.kind,
                count: 1
              }, Nil.value);
            }
            ;
            if (v instanceof Cons && eq42(v.value0.kind)(v1.kind)) {
              return new Cons({
                kind: v.value0.kind,
                count: v.value0.count + 1 | 0
              }, v.value1);
            }
            ;
            if (v instanceof Cons && otherwise) {
              return new Cons(v.value0, addCaptured(v.value1)(v1));
            }
            ;
            throw new Error("Failed pattern match at Main (line 228, column 9 - line 228, column 63): " + [v.constructor.name, v1.constructor.name]);
          };
        };
        var capturedPieces = function(captured) {
          return function(activePiece) {
            if (activePiece.position.row === (-1 | 0) && activePiece.position.col === (-1 | 0)) {
              return decrCount(captured)(activePiece);
            }
            ;
            if (otherwise) {
              var v = accessCell(state3.clickedCell.col)(state3.clickedCell.row)(state3.board);
              if (v instanceof Nothing) {
                return captured;
              }
              ;
              if (v instanceof Just) {
                return addCaptured(captured)(v.value0);
              }
              ;
              throw new Error("Failed pattern match at Main (line 217, column 25 - line 219, column 53): " + [v.constructor.name]);
            }
            ;
            throw new Error("Failed pattern match at Main (line 212, column 9 - line 212, column 66): " + [captured.constructor.name, activePiece.constructor.name]);
          };
        };
        var $271 = valid_move === true;
        if ($271) {
          if (state3.activePiece instanceof Nothing) {
            return state3;
          }
          ;
          if (state3.activePiece instanceof Just) {
            var next_player = function() {
              var $273 = state3.moveCount === 1;
              if ($273) {
                var $274 = eq4(state3.currentPlayer)(One.value);
                if ($274) {
                  return Two.value;
                }
                ;
                return One.value;
              }
              ;
              return state3.currentPlayer;
            }();
            var clicked_cell = function() {
              var $275 = notEq1(next_player)(state3.currentPlayer);
              if ($275) {
                return {
                  col: -2 | 0,
                  row: -2 | 0
                };
              }
              ;
              return state3.clickedCell;
            }();
            var checker = function() {
              var $276 = state3.moveCount === 1;
              if ($276) {
                return 3;
              }
              ;
              return state3.moveCount - 1 | 0;
            }();
            var $277 = eq4(state3.currentPlayer)(One.value);
            if ($277) {
              return {
                tickCount: state3.tickCount,
                lastReceivedMessage: state3.lastReceivedMessage,
                possibleMoves: state3.possibleMoves,
                activePiece: state3.activePiece,
                playerTwoCaptures: state3.playerTwoCaptures,
                winner: state3.winner,
                columns: state3.columns,
                rows: state3.rows,
                gameStart: state3.gameStart,
                initialized: state3.initialized,
                myPlayerNum: state3.myPlayerNum,
                board: movePiece(state3.board)(state3.activePiece.value0.position)(state3.clickedCell),
                currentPlayer: next_player,
                playerOneCaptures: capturedPieces(state3.playerOneCaptures)(state3.activePiece.value0),
                moveCount: checker,
                clickedCell: clicked_cell
              };
            }
            ;
            return {
              tickCount: state3.tickCount,
              lastReceivedMessage: state3.lastReceivedMessage,
              possibleMoves: state3.possibleMoves,
              activePiece: state3.activePiece,
              playerOneCaptures: state3.playerOneCaptures,
              winner: state3.winner,
              columns: state3.columns,
              rows: state3.rows,
              gameStart: state3.gameStart,
              initialized: state3.initialized,
              myPlayerNum: state3.myPlayerNum,
              board: movePiece(state3.board)(state3.activePiece.value0.position)(state3.clickedCell),
              currentPlayer: next_player,
              playerTwoCaptures: capturedPieces(state3.playerTwoCaptures)(state3.activePiece.value0),
              moveCount: checker,
              clickedCell: clicked_cell
            };
          }
          ;
          throw new Error("Failed pattern match at Main (line 185, column 12 - line 201, column 37): " + [state3.activePiece.constructor.name]);
        }
        ;
        return state3;
      };
      var getCapturedMessage = function(v) {
        if (v instanceof Nil) {
          return "None";
        }
        ;
        var helper = function(acc) {
          return function(captured_piece) {
            if (eq42(captured_piece.kind)(Pawn.value)) {
              return acc + ("p" + show4(captured_piece.count));
            }
            ;
            if (eq42(captured_piece.kind)(Bishop.value)) {
              return acc + ("b" + show4(captured_piece.count));
            }
            ;
            if (eq42(captured_piece.kind)(Rook.value)) {
              return acc + ("r" + show4(captured_piece.count));
            }
            ;
            if (eq42(captured_piece.kind)(Prince.value)) {
              return acc + ("k" + show4(captured_piece.count));
            }
            ;
            if (eq42(captured_piece.kind)(Princess.value)) {
              return acc + ("q" + show4(captured_piece.count));
            }
            ;
            if (otherwise) {
              return acc + "xx";
            }
            ;
            throw new Error("Failed pattern match at Main (line 293, column 9 - line 293, column 47): " + [acc.constructor.name, captured_piece.constructor.name]);
          };
        };
        return foldl3(helper)("")(v);
      };
      var getBoardMessage = function(col) {
        return function(row) {
          return function(board) {
            if (col >= columns) {
              return " " + getBoardMessage(0)(row + 1 | 0)(board);
            }
            ;
            if (row >= rows4) {
              return "";
            }
            ;
            if (otherwise) {
              var v = accessCell(col)(row)(board);
              if (v instanceof Nothing) {
                return "xx" + getBoardMessage(col + 1 | 0)(row)(board);
              }
              ;
              if (v instanceof Just) {
                if (v.value0.kind instanceof Pawn) {
                  return "p" + function() {
                    var $287 = eq4(v.value0.player)(One.value);
                    if ($287) {
                      return "1" + getBoardMessage(col + 1 | 0)(row)(board);
                    }
                    ;
                    return "2" + getBoardMessage(col + 1 | 0)(row)(board);
                  }();
                }
                ;
                if (v.value0.kind instanceof Bishop) {
                  return "b" + function() {
                    var $288 = eq4(v.value0.player)(One.value);
                    if ($288) {
                      return "1" + getBoardMessage(col + 1 | 0)(row)(board);
                    }
                    ;
                    return "2" + getBoardMessage(col + 1 | 0)(row)(board);
                  }();
                }
                ;
                if (v.value0.kind instanceof Rook) {
                  return "r" + function() {
                    var $289 = eq4(v.value0.player)(One.value);
                    if ($289) {
                      return "1" + getBoardMessage(col + 1 | 0)(row)(board);
                    }
                    ;
                    return "2" + getBoardMessage(col + 1 | 0)(row)(board);
                  }();
                }
                ;
                if (v.value0.kind instanceof Prince) {
                  return "k" + function() {
                    var $290 = eq4(v.value0.player)(One.value);
                    if ($290) {
                      return "1" + getBoardMessage(col + 1 | 0)(row)(board);
                    }
                    ;
                    return "2" + getBoardMessage(col + 1 | 0)(row)(board);
                  }();
                }
                ;
                if (v.value0.kind instanceof Princess) {
                  return "q" + function() {
                    var $291 = eq4(v.value0.player)(One.value);
                    if ($291) {
                      return "1" + getBoardMessage(col + 1 | 0)(row)(board);
                    }
                    ;
                    return "2" + getBoardMessage(col + 1 | 0)(row)(board);
                  }();
                }
                ;
                throw new Error("Failed pattern match at Main (line 282, column 23 - line 287, column 144): " + [v.value0.kind.constructor.name]);
              }
              ;
              throw new Error("Failed pattern match at Main (line 280, column 21 - line 287, column 144): " + [v.constructor.name]);
            }
            ;
            throw new Error("Failed pattern match at Main (line 276, column 5 - line 276, column 53): " + [col.constructor.name, row.constructor.name, board.constructor.name]);
          };
        };
      };
      var sendStateMessage = function(state3) {
        return function __do() {
          send(show42(state3.currentPlayer) + (" " + (getCapturedMessage(state3.playerOneCaptures) + (" " + (getCapturedMessage(state3.playerTwoCaptures) + (" " + trim(getBoardMessage(0)(0)(state3.board))))))))();
          return state3;
        };
      };
      var constructBoard = function(row) {
        return function(board) {
          var v = index(board)(row);
          if (v instanceof Nothing) {
            return [];
          }
          ;
          if (v instanceof Just) {
            var constructRow = function(col) {
              return function(row_string) {
                if (col >= columns || row_string === "") {
                  return [];
                }
                ;
                if (otherwise) {
                  var player_num = function() {
                    var v1 = take5(1)(drop4(1)(row_string));
                    if (v1 === "1") {
                      return One.value;
                    }
                    ;
                    return Two.value;
                  }();
                  var piece = take5(1)(row_string);
                  var new_piece = function() {
                    if (piece === "p") {
                      return createPawn(col)(row)(player_num);
                    }
                    ;
                    if (piece === "b") {
                      return createBishop(col)(row)(player_num);
                    }
                    ;
                    if (piece === "r") {
                      return createRook(col)(row)(player_num);
                    }
                    ;
                    if (piece === "k") {
                      return createPrince(col)(row)(player_num);
                    }
                    ;
                    if (piece === "q") {
                      return createPrincess(col)(row)(player_num);
                    }
                    ;
                    return Nothing.value;
                  }();
                  return append13([new_piece])(constructRow(col + 1 | 0)(drop4(2)(row_string)));
                }
                ;
                throw new Error("Failed pattern match at Main (line 307, column 11 - line 307, column 63): " + [col.constructor.name, row_string.constructor.name]);
              };
            };
            return append13([constructRow(0)(v.value0)])(constructBoard(row + 1 | 0)(board));
          }
          ;
          throw new Error("Failed pattern match at Main (line 303, column 32 - line 323, column 33): " + [v.constructor.name]);
        };
      };
      var initializeGame = function(state3) {
        return function __do() {
          (function() {
            var $299 = state3.initialized === false;
            if ($299) {
              return send("init1 " + (show4(state3.columns) + (" " + (show4(state3.rows) + (" " + getBoardMessage(0)(0)(state3.board))))))();
            }
            ;
            return send("init2 " + (show4(state3.columns) + (" " + (show4(state3.rows) + (" " + getBoardMessage(0)(0)(state3.board))))))();
          })();
          var player = function() {
            if (state3.lastReceivedMessage instanceof Nothing) {
              return "";
            }
            ;
            if (state3.lastReceivedMessage instanceof Just) {
              var $301 = show32(state3.lastReceivedMessage.value0.playerId) === "Player1";
              if ($301) {
                return "One";
              }
              ;
              var $302 = show32(state3.lastReceivedMessage.value0.playerId) === "Player2";
              if ($302) {
                return "Two";
              }
              ;
              return "";
            }
            ;
            throw new Error("Failed pattern match at Main (line 401, column 18 - line 403, column 125): " + [state3.lastReceivedMessage.constructor.name]);
          }();
          var my_player_num = function() {
            if (state3.lastReceivedMessage instanceof Nothing) {
              return state3.currentPlayer;
            }
            ;
            if (state3.lastReceivedMessage instanceof Just) {
              var $305 = take5(1)(drop4(4)(state3.lastReceivedMessage.value0.payload)) === "1";
              if ($305) {
                return One.value;
              }
              ;
              var $306 = take5(1)(drop4(4)(state3.lastReceivedMessage.value0.payload)) === "2";
              if ($306) {
                return Two.value;
              }
              ;
              return state3.currentPlayer;
            }
            ;
            throw new Error("Failed pattern match at Main (line 409, column 25 - line 415, column 37): " + [state3.lastReceivedMessage.constructor.name]);
          }();
          var message2 = function() {
            if (state3.lastReceivedMessage instanceof Nothing) {
              return [];
            }
            ;
            if (state3.lastReceivedMessage instanceof Just) {
              var $309 = take5(4)(state3.lastReceivedMessage.value0.payload) === "init";
              if ($309) {
                return split(" ")(drop4(6)(state3.lastReceivedMessage.value0.payload));
              }
              ;
              return [];
            }
            ;
            throw new Error("Failed pattern match at Main (line 404, column 19 - line 408, column 20): " + [state3.lastReceivedMessage.constructor.name]);
          }();
          var $311 = notEq22(message2)([]);
          if ($311) {
            var $312 = player === "One" && state3.initialized === false;
            if ($312) {
              var new_rows = function() {
                var v = index(message2)(1);
                if (v instanceof Nothing) {
                  return 0;
                }
                ;
                if (v instanceof Just) {
                  var v1 = fromString(v.value0);
                  if (v1 instanceof Nothing) {
                    return 0;
                  }
                  ;
                  if (v1 instanceof Just) {
                    return v1.value0;
                  }
                  ;
                  throw new Error("Failed pattern match at Main (line 428, column 35 - line 430, column 34): " + [v1.constructor.name]);
                }
                ;
                throw new Error("Failed pattern match at Main (line 426, column 24 - line 430, column 34): " + [v.constructor.name]);
              }();
              var new_columns = function() {
                var v = index(message2)(0);
                if (v instanceof Nothing) {
                  return 0;
                }
                ;
                if (v instanceof Just) {
                  var v1 = fromString(v.value0);
                  if (v1 instanceof Nothing) {
                    return 0;
                  }
                  ;
                  if (v1 instanceof Just) {
                    return v1.value0;
                  }
                  ;
                  throw new Error("Failed pattern match at Main (line 423, column 35 - line 425, column 34): " + [v1.constructor.name]);
                }
                ;
                throw new Error("Failed pattern match at Main (line 421, column 27 - line 425, column 34): " + [v.constructor.name]);
              }();
              var board_array = function() {
                var v = dropEnd(1)(drop(2)(message2));
                if (v.length === 0) {
                  return [];
                }
                ;
                return v;
              }();
              var new_board = function() {
                var $322 = length(board_array) === new_rows;
                if ($322) {
                  return constructBoard(0)(board_array);
                }
                ;
                return [];
              }();
              return {
                activePiece: state3.activePiece,
                clickedCell: state3.clickedCell,
                currentPlayer: state3.currentPlayer,
                gameStart: state3.gameStart,
                lastReceivedMessage: state3.lastReceivedMessage,
                moveCount: state3.moveCount,
                playerOneCaptures: state3.playerOneCaptures,
                playerTwoCaptures: state3.playerTwoCaptures,
                possibleMoves: state3.possibleMoves,
                tickCount: state3.tickCount,
                winner: state3.winner,
                columns: new_columns,
                rows: new_rows,
                board: new_board,
                initialized: true,
                myPlayerNum: my_player_num
              };
            }
            ;
            var $323 = player === "Two";
            if ($323) {
              return {
                activePiece: state3.activePiece,
                board: state3.board,
                clickedCell: state3.clickedCell,
                columns: state3.columns,
                currentPlayer: state3.currentPlayer,
                initialized: state3.initialized,
                lastReceivedMessage: state3.lastReceivedMessage,
                moveCount: state3.moveCount,
                myPlayerNum: state3.myPlayerNum,
                playerOneCaptures: state3.playerOneCaptures,
                playerTwoCaptures: state3.playerTwoCaptures,
                possibleMoves: state3.possibleMoves,
                rows: state3.rows,
                tickCount: state3.tickCount,
                winner: state3.winner,
                gameStart: true
              };
            }
            ;
            return state3;
          }
          ;
          return state3;
        };
      };
      var readStateMessage = function(state3) {
        var payload_arr = function() {
          if (state3.lastReceivedMessage instanceof Nothing) {
            return [];
          }
          ;
          if (state3.lastReceivedMessage instanceof Just) {
            return split(" ")(state3.lastReceivedMessage.value0.payload);
          }
          ;
          throw new Error("Failed pattern match at Main (line 356, column 23 - line 358, column 64): " + [state3.lastReceivedMessage.constructor.name]);
        }();
        var is_command = function() {
          var v = index(payload_arr)(0);
          if (v instanceof Nothing) {
            return false;
          }
          ;
          if (v instanceof Just) {
            var $327 = v.value0 === "click";
            if ($327) {
              return true;
            }
            ;
            return false;
          }
          ;
          throw new Error("Failed pattern match at Main (line 369, column 22 - line 373, column 23): " + [v.constructor.name]);
        }();
        var player_one_captures = function() {
          var $329 = is_command === true;
          if ($329) {
            return state3.playerOneCaptures;
          }
          ;
          var v = index(payload_arr)(1);
          if (v instanceof Just) {
            return readCapturedMessage(v.value0);
          }
          ;
          if (v instanceof Nothing) {
            return state3.playerOneCaptures;
          }
          ;
          throw new Error("Failed pattern match at Main (line 377, column 16 - line 379, column 47): " + [v.constructor.name]);
        }();
        var player_two_captures = function() {
          var $332 = is_command === true;
          if ($332) {
            return state3.playerTwoCaptures;
          }
          ;
          var v = index(payload_arr)(2);
          if (v instanceof Just) {
            return readCapturedMessage(v.value0);
          }
          ;
          if (v instanceof Nothing) {
            return state3.playerTwoCaptures;
          }
          ;
          throw new Error("Failed pattern match at Main (line 383, column 16 - line 385, column 45): " + [v.constructor.name]);
        }();
        var current_player = function() {
          if (state3.lastReceivedMessage instanceof Nothing) {
            return show42(state3.currentPlayer);
          }
          ;
          if (state3.lastReceivedMessage instanceof Just) {
            return take5(3)(state3.lastReceivedMessage.value0.payload);
          }
          ;
          throw new Error("Failed pattern match at Main (line 360, column 26 - line 362, column 49): " + [state3.lastReceivedMessage.constructor.name]);
        }();
        var board = drop(3)(payload_arr);
        var new_board = function() {
          var $337 = length(board) === state3.rows;
          if ($337) {
            return constructBoard(0)(board);
          }
          ;
          return state3.board;
        }();
        return {
          tickCount: state3.tickCount,
          lastReceivedMessage: state3.lastReceivedMessage,
          clickedCell: state3.clickedCell,
          possibleMoves: state3.possibleMoves,
          activePiece: state3.activePiece,
          winner: state3.winner,
          moveCount: state3.moveCount,
          columns: state3.columns,
          rows: state3.rows,
          gameStart: state3.gameStart,
          initialized: state3.initialized,
          myPlayerNum: state3.myPlayerNum,
          board: new_board,
          currentPlayer: function() {
            var $338 = current_player === "One";
            if ($338) {
              return One.value;
            }
            ;
            var $339 = current_player === "Two";
            if ($339) {
              return Two.value;
            }
            ;
            return gameState.currentPlayer;
          }(),
          playerOneCaptures: player_one_captures,
          playerTwoCaptures: player_two_captures
        };
      };
      if (!gameState.gameStart) {
        return initializeGame(gameState);
      }
      ;
      if (gameState.gameStart) {
        var $341 = notEq1(gameState.myPlayerNum)(gameState.currentPlayer);
        if ($341) {
          return pure4(updateGameOver(updateTickCount(readStateMessage(gameState))));
        }
        ;
        if (gameState.winner instanceof Nothing) {
          var $343 = valid_move === true;
          if ($343) {
            return sendStateMessage(updateGameOver(updateTickCount(updatePossibleMoves(updateActivePiece(makeMove(gameState))))));
          }
          ;
          return pure4(updateGameOver(updateTickCount(updatePossibleMoves(updateActivePiece(makeMove(gameState))))));
        }
        ;
        if (gameState.winner instanceof Just) {
          return pure4(gameState);
        }
        ;
        throw new Error("Failed pattern match at Main (line 462, column 12 - line 478, column 27): " + [gameState.winner.constructor.name]);
      }
      ;
      throw new Error("Failed pattern match at Main (line 455, column 3 - line 478, column 27): " + [gameState.gameStart.constructor.name]);
    };
  };
  var main = /* @__PURE__ */ startNetworkGame({
    initialState,
    onTick,
    onMouseDown,
    onKeyDown,
    onKeyUp,
    onRender,
    onMessage: onMessage2,
    fps,
    width: width8,
    height: height8,
    ipAddress: "localhost",
    port: 15e3,
    imagePaths: images2
  });

  // <stdin>
  main();
})();
